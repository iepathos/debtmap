{
  "chapter_id": "coverage-integration",
  "chapter_title": "Coverage Integration",
  "chapter_file": "book/src/coverage-integration.md",
  "drift_detected": true,
  "severity": "high",
  "quality_assessment": "Chapter has significant drift in coverage scoring methodology - describes deprecated additive model instead of current dampening multiplier approach",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "high",
      "section": "How Coverage Affects Scoring",
      "description": "Chapter describes deprecated coverage factor (40% weight) additive model, but code now uses coverage dampening multiplier approach (spec 122)",
      "current_content": "Coverage Factor = 10 × (1 - coverage_percentage) × complexity_weight\n\nThe coverage factor contributes **40%** to the unified debt score",
      "should_be": "Coverage acts as a dampening multiplier: final_score = base_score × (1.0 - coverage_percentage)\n\nThis is the current implementation per spec 122, not the deprecated additive model",
      "fix_suggestion": "Update section to explain coverage dampening multiplier instead of additive factor. The coverage_multiplier = 1.0 - coverage_pct is applied to the base score, not added as a weighted component.",
      "source_reference": "src/priority/scoring/calculation.rs:8-21 (calculate_coverage_multiplier), src/priority/scoring/calculation.rs:68-82 (calculate_base_score_with_coverage_multiplier)"
    },
    {
      "type": "outdated_information",
      "severity": "high",
      "section": "Coverage Factor (40% Weight)",
      "description": "Entire subsection describes deprecated model with coverage_factor calculation",
      "current_content": "Coverage Factor = 10 × (1 - coverage_percentage) × complexity_weight\n\nExamples:\n- 0% coverage → Factor = 10.0 (maximum penalty)\n- 50% coverage → Factor = 5.0 (moderate penalty)\n- 100% coverage → Factor = 0.0 (no penalty)",
      "should_be": "Coverage Dampening Multiplier = 1.0 - coverage_percentage\n\nExamples:\n- 0% coverage → Multiplier = 1.0 (full base score)\n- 50% coverage → Multiplier = 0.5 (half base score)\n- 100% coverage → Multiplier = 0.0 (near-zero score)",
      "fix_suggestion": "Replace entire 'Coverage Factor (40% Weight)' subsection with 'Coverage Dampening Multiplier' explaining the multiplicative approach. Remove mentions of '40% weight' as coverage is no longer a weighted component.",
      "source_reference": "src/priority/scoring/calculation.rs:8-21, src/cli.rs:75-78 (CLI help text describes dampening)"
    },
    {
      "type": "incorrect_example",
      "severity": "high",
      "section": "Coverage Dampening (Score Multiplier)",
      "description": "Section title and examples are correct but placement is wrong - this should be THE primary explanation, not a secondary section",
      "current_content": "After base scores are calculated, coverage *dampens* the final debt score",
      "should_be": "This IS how coverage works now - should be the primary explanation, not 'after base scores'",
      "fix_suggestion": "Move this section up to replace the 'Coverage Factor' section. This is the current implementation, not a supplementary feature.",
      "source_reference": "src/priority/scoring/calculation.rs:68-82"
    },
    {
      "type": "outdated_information",
      "severity": "medium",
      "section": "Scoring Weights Configuration",
      "description": "Default weights shown are incorrect - chapter shows deprecated 40/40/20 split",
      "current_content": "[scoring]\ncoverage = 0.40  # Default: 40%\ncomplexity = 0.40\ndependency = 0.20",
      "should_be": "[scoring]\ncoverage = 0.50  # Default: 50%\ncomplexity = 0.35\ndependency = 0.15",
      "fix_suggestion": "Update default weights in configuration example to match actual defaults: coverage=0.50, complexity=0.35, dependency=0.15. Note that these weights only apply when coverage data is NOT available - when coverage is available, it acts as a multiplier instead.",
      "source_reference": "src/config.rs:122-132 (default_coverage_weight, default_complexity_weight, default_dependency_weight)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Scoring Methodology",
      "description": "Chapter doesn't explain the two different scoring modes: with coverage (dampening) vs without coverage (weighted sum)",
      "should_add": "Explain that scoring works differently based on coverage availability:\n1. WITH coverage: base_score = (complexity*0.50 + dependency*0.25), then dampened by coverage_multiplier\n2. WITHOUT coverage: weighted_sum with coverage=0.50, complexity=0.35, dependency=0.15",
      "fix_suggestion": "Add new subsection 'Scoring Modes' explaining the difference between coverage-dampening mode (when LCOV provided) and weighted-sum mode (no coverage data). This is a critical architectural detail.",
      "source_reference": "src/priority/scoring/calculation.rs:68-82 (with coverage), src/priority/scoring/calculation.rs:119-129 (without coverage)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Performance Characteristics",
      "description": "Performance numbers are excellent and appear accurate, but missing source code reference",
      "should_add": "Reference to the actual implementation of CoverageIndex for verification",
      "fix_suggestion": "Add source reference to CoverageIndex implementation to allow readers to verify performance characteristics",
      "source_reference": "src/risk/coverage_index.rs:13-38 (CoverageIndex struct and docs)"
    },
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Special Cases - Entry points",
      "description": "Chapter mentions 'entry points weighted at 0.6x' for coverage factor, but this is part of role_multiplier system",
      "current_content": "Entry points: Weighted at 0.6x (entry points naturally have low coverage)",
      "should_be": "Entry points get role_multiplier adjustments based on function classification, not specific coverage factor weighting",
      "fix_suggestion": "Clarify that entry points are handled through the semantic classification system (FunctionRole) which applies role_multiplier, not through coverage-specific weighting.",
      "source_reference": "src/priority/unified_scorer.rs:149 (classify_function_role), src/priority/scoring/classification.rs"
    }
  ],
  "positive_aspects": [
    "Excellent coverage of LCOV format and structure - accurate and detailed",
    "Language-specific coverage generation instructions are comprehensive and correct",
    "Troubleshooting section is thorough and addresses real issues",
    "Performance characteristics section provides valuable concrete numbers",
    "Best practices and CI integration examples are high quality",
    "End-to-end examples for each language are practical and correct",
    "Transitive coverage propagation is well explained",
    "CLI options reference is accurate and complete"
  ],
  "improvement_suggestions": [
    "Restructure 'How Coverage Affects Scoring' to reflect current dampening-based architecture",
    "Remove or clearly mark deprecated coverage factor calculation as historical context",
    "Add dedicated section explaining scoring mode differences (with/without coverage)",
    "Update all scoring formulas to show current implementation",
    "Consider adding a 'Migration from v0.2.7' section if the additive model was recent",
    "Add more examples showing actual score calculations with the dampening multiplier",
    "Link to unified_scorer.rs and calculation.rs for readers wanting implementation details"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "LCOV format support",
      "Generating coverage with cargo-tarpaulin",
      "Coverage for other languages (pytest, jest, go test)",
      "Coverage index performance",
      "Transitive coverage propagation",
      "Troubleshooting coverage correlation",
      "Best practices"
    ],
    "validation_focus": "Check that coverage setup, tool integration, and troubleshooting are documented for all supported languages",
    "validation_result": "Coverage setup and tool integration are excellent. Scoring methodology explanation has significant drift from implementation."
  }
}
