{
  "chapter_id": "god-object-detection",
  "chapter_title": "God Object Detection",
  "chapter_file": "book/src/god-object-detection.md",
  "drift_detected": true,
  "severity": "high",
  "quality_assessment": "Chapter contains outdated information about file-level aggregation strategy that contradicts current implementation. The implementation has moved from combining standalone functions with struct methods to analyzing them separately (god class vs god module). Several other areas need clarification and updates.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "high",
      "section": "File-Level Aggregation (lines 54-70)",
      "description": "Chapter describes file-level aggregation where standalone functions are combined with struct methods: 'total_methods = type_methods + standalone_functions'. However, implementation comments (god_object_detector.rs:451-459) explicitly state this was INCORRECT and has been CHANGED to separate god class detection from god module detection.",
      "current_content": "An important feature of Debtmap's god object detection is its **file-level aggregation strategy**. When analyzing a file, Debtmap:\n\n1. Finds the largest type (struct/class) by `method_count + field_count Ã— 2`\n2. Counts standalone functions in the file\n3. Combines them: `total_methods = type_methods + standalone_functions`",
      "should_be": "Debtmap distinguishes between:\n- **God Class**: Single struct with excessive methods (>20), fields (>15)\n- **God Module**: File with excessive standalone functions (>50)\n\nThese are analyzed separately, not combined, to avoid false positives for functional/procedural modules.",
      "fix_suggestion": "Rewrite the File-Level Aggregation section to explain the god class vs god module distinction. Remove the formula showing combined totals. Add explanation of why they are analyzed separately.",
      "source_reference": "src/organization/god_object_detector.rs:449-459"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Detection Criteria",
      "description": "Chapter lists 5 metrics but the actual detection uses god class vs god module distinction with different thresholds for each type",
      "should_add": "Document that detection now has two separate paths:\n1. God Class detection (excessive methods AND fields in a single struct)\n2. God Module detection (excessive standalone functions in a file)\n\nEach has different thresholds and scoring approaches.",
      "fix_suggestion": "Add subsections for 'God Class Detection' and 'God Module Detection' with their specific criteria",
      "source_reference": "src/organization/god_object_detector.rs:449-500"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Example 3: Mixed Paradigm File (lines 220-231)",
      "description": "Example shows file-level aggregation combining struct methods with standalone functions (25 total), but this is no longer how the system works",
      "current_content": "**File:** `utils.rs` with small struct (5 methods, 3 fields) + 20 standalone functions\n\n**Detection:**\n- **Is God Object:** Yes\n- **Total Methods:** 25 (5 + 20)",
      "should_be": "This would be analyzed as:\n- Struct: NOT a god class (5 methods < 20 threshold)\n- File: POSSIBLY a god module (20 standalone functions)\n\nThe struct and file are evaluated separately.",
      "fix_suggestion": "Update example to show separate analysis or remove this example and replace with clearer god class and god module examples",
      "source_reference": "src/organization/god_object_detector.rs:449-500"
    },
    {
      "type": "incomplete_explanation",
      "severity": "medium",
      "section": "Confidence Levels (lines 72-83)",
      "description": "Chapter states 'The final determination also requires god_object_score >= 70.0. Both criteria must be met for a definite god object classification.' However, code doesn't show this dual requirement clearly in determine_confidence function",
      "current_content": "The final determination also requires `god_object_score >= 70.0`. Both criteria must be met for a definite god object classification.",
      "should_be": "Confidence is determined solely by violation count (5 violations = Definite, 3-4 = Probable, 1-2 = Possible, 0 = NotGodObject). The score >= 70 threshold is mentioned but not enforced in determine_confidence function.",
      "fix_suggestion": "Clarify the relationship between score and confidence. If score >= 70 is a requirement, show where this is enforced. If not, remove this claim.",
      "source_reference": "src/organization/god_object_analysis.rs:236-268"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Responsibility Detection",
      "description": "Chapter claims 28 standard prefixes but the classify_responsibility function (god_object_detector.rs:869-883) shows only 28 specific prefixes grouped into 10 categories. However, infer_responsibility_from_method (god_object_analysis.rs:318+) shows many more patterns including 'format', 'render', 'parse', etc.",
      "should_add": "Document the complete set of responsibility patterns including:\n- Formatting & Output (format, render, write, print)\n- Parsing & Input (parse, read, extract)\n- And others from the actual implementation",
      "fix_suggestion": "Audit the complete infer_responsibility_from_method function and document all patterns, not just the 10 main categories",
      "source_reference": "src/organization/god_object_analysis.rs:318-400"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Purity-Weighted Scoring",
      "description": "Chapter mentions purity analysis but doesn't explain the three purity levels clearly or how they're detected",
      "should_add": "Explain how purity levels are detected:\n- Pure: Functions with no side effects (read-only operations)\n- Probably Pure: Functions that appear pure but may have hidden side effects\n- Impure: Functions with clear side effects (I/O, mutation, etc.)",
      "fix_suggestion": "Add a subsection explaining purity detection heuristics",
      "source_reference": "src/organization/purity_analyzer.rs (referenced in imports)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Integration with File-Level Scoring (lines 441-458)",
      "description": "Chapter mentions god_object_multiplier = 2.0 + normalized_god_object_score but doesn't explain normalization formula or show where this is used",
      "should_add": "Explain how god_object_score is normalized (0-1 range) and show where the multiplier is applied in the scoring pipeline",
      "fix_suggestion": "Add example calculation or link to file-level scoring documentation",
      "source_reference": "features.json:570 and file-level scoring code"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of god object detection thresholds per language",
    "Clear explanation of scoring algorithms (simple and complexity-weighted)",
    "Good documentation of CLI flags and configuration options",
    "Helpful examples and refactoring recommendations",
    "Well-structured progression from basic to advanced concepts",
    "Excellent troubleshooting section addressing common questions",
    "Good documentation of responsibility categories and their mappings"
  ],
  "improvement_suggestions": [
    "Rewrite the file-level aggregation section to match current god class vs god module implementation",
    "Add a clear architectural diagram showing the detection flow for god classes vs god modules",
    "Include more examples showing the difference between god classes and god modules",
    "Add code snippets from actual implementation to ground explanations",
    "Consider adding a 'Recent Changes' or 'Implementation Notes' section to highlight the shift from combined to separate analysis",
    "Update Example 3 or remove it since it shows the old (incorrect) behavior",
    "Clarify the relationship between score thresholds and confidence levels"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "Detection criteria (method count, field count, responsibilities)",
      "God object scoring algorithm",
      "Thresholds and configuration",
      "File-level aggregation (OUTDATED)",
      "Refactoring recommendations",
      "Examples and case studies"
    ],
    "validation_focus": "Check that god object detection algorithm, scoring, and configuration options are documented",
    "key_finding": "Critical drift detected: file-level aggregation strategy documented in chapter contradicts current implementation which separates god class from god module detection"
  }
}
