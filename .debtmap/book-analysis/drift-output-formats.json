{
  "chapter_id": "output-formats",
  "chapter_title": "Output Formats",
  "chapter_file": "book/src/output-formats.md",
  "drift_detected": true,
  "severity": "low",
  "quality_assessment": "Excellent chapter quality with comprehensive coverage of all output formats. Documentation is highly accurate and matches implementation closely. Minor issues relate to outdated emoji mode claim and incomplete enhanced markdown documentation. The chapter excels at practical examples, CI/CD integration, and user-facing documentation.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Plain Terminal Mode (line 151)",
      "description": "Documentation claims '--plain' flag controls both 'color mode and emoji mode', but implementation only has color mode",
      "current_content": "Terminal output formatting can be customized via `FormattingConfig`, which controls color mode and emoji mode. The `--plain` flag uses this configuration to disable both colors and emoji.",
      "should_be": "Terminal output formatting can be customized via `FormattingConfig`, which controls color mode. The `--plain` flag uses this configuration to disable colors.",
      "fix_suggestion": "Remove references to 'emoji mode' as the implementation only has ColorMode (Auto/Always/Never) in src/formatting/mod.rs:6-30. FormattingConfig struct (lines 32-44) only has 'color: ColorMode' field, no emoji mode.",
      "source_reference": "src/formatting/mod.rs:32-44"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Enhanced Markdown Features (line 640-651)",
      "description": "Documentation acknowledges enhanced markdown features exist but doesn't document how to enable them",
      "current_content": "Enhanced markdown features are implemented in the codebase (`src/io/writers/enhanced_markdown/` module) but the specific flags or configuration options to enable them are not currently documented. Refer to the source code or use `--help` to discover available options.",
      "should_add": "Document the actual flags or configuration needed to enable enhanced markdown features, or clarify that these are internal modules not exposed via CLI",
      "fix_suggestion": "Either document how users can access enhanced markdown features, or clarify that EnhancedMarkdownWriter is currently internal-only and standard markdown output uses MarkdownWriter. The module exists (src/io/writers/enhanced_markdown/) but CLI usage is unclear.",
      "source_reference": "src/io/writers/mod.rs:7, src/io/writers/enhanced_markdown/"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Output Options",
      "description": "Chapter doesn't mention --explain-metrics flag available in CLI",
      "should_add": "Document the --explain-metrics flag which explains metric definitions and formulas (measured vs estimated)",
      "fix_suggestion": "Add subsection documenting the --explain-metrics flag for understanding metric calculations and helping users interpret complexity scores",
      "source_reference": "src/cli.rs:252-254"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "JSON Format Variants (line 472-489)",
      "description": "Documentation could better explain when to use legacy vs unified JSON format and show structural differences",
      "current_content": "**Legacy format:** Uses `{File: {...}}` and `{Function: {...}}` wrappers for backward compatibility with existing tooling.\n\n**Unified format:** Consistent structure with a `type` field, making parsing simpler and more predictable. Recommended for new integrations.",
      "should_add": "Add migration guidance: 'Use legacy format if you have existing tooling that expects the old structure. Use unified format for all new integrations. The legacy format will be maintained for backward compatibility but unified is the recommended format going forward.' Include side-by-side examples showing the structural differences.",
      "fix_suggestion": "Expand section with concrete before/after examples and migration strategy. Show actual JSON structure differences between the two formats.",
      "source_reference": "src/cli.rs:53-57"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of all three output formats (terminal, JSON, markdown)",
    "Excellent CI/CD integration examples (GitHub Actions, GitLab CI, Jenkins)",
    "Extensive jq query examples for JSON manipulation - highly practical",
    "Accurate JSON schema documentation with detailed field descriptions",
    "Good documentation of risk analysis output with --lcov coverage",
    "Clear explanation of --plain flag for ASCII-only output",
    "Filtering options (--top, --tail, --summary, --filter, --min-priority) well-documented",
    "Best Practices section provides excellent guidance on when to use each format",
    "Troubleshooting section addresses common issues effectively",
    "Tool integration examples are practical and copy-paste ready",
    "Correctly documents exit code limitations with workarounds",
    "Quick reference table is helpful for format selection",
    "Verbosity level examples show concrete output differences",
    "Accurate documentation of environment variables (NO_COLOR, CLICOLOR, CLICOLOR_FORCE)",
    "Correctly notes that JSON is pretty-printed by default",
    "Good documentation of --output-format flag for legacy/unified JSON",
    "Correctly documents that verbosity flags only affect terminal output",
    "EntropyScore fields are well-documented with clear explanations",
    "Debt score thresholds and risk level boundaries are accurately explained"
  ],
  "improvement_suggestions": [
    "Remove outdated emoji mode references - implementation only has color mode",
    "Document how to access enhanced markdown features or clarify they are internal-only",
    "Add documentation for --explain-metrics flag",
    "Expand JSON format variants section with concrete structural examples and migration guidance",
    "Add side-by-side comparison showing legacy vs unified JSON format differences",
    "Consider adding actual debtmap output samples from real runs",
    "Add examples showing visual difference between --plain and default terminal output"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "JSON output",
      "Text reports",
      "Integration with tools",
      "Custom formatting",
      "Terminal output with colors",
      "Markdown documentation",
      "CI/CD pipelines",
      "Output filtering",
      "Environment variables"
    ],
    "validation_focus": "Verify output format documentation matches src/io/ implementation"
  }
}
