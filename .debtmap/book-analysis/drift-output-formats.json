{
  "chapter_id": "output-formats",
  "chapter_title": "Output Formats",
  "chapter_file": "book/src/output-formats.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter is comprehensive and well-structured, covering all three output formats (terminal, JSON, markdown) with extensive examples. Most content accurately reflects the implementation. Main drift issues are minor terminology inconsistencies in complexity classifications, some missing clarifications about EntropyScore fields, and incomplete documentation of FormattingConfig customization options. The chapter excels at practical integration examples (CI/CD, jq queries, editor integration) and correctly documents important limitations (exit codes). Overall quality is high with excellent user-facing documentation.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "medium",
      "section": "Terminal Output - Complexity Classification (lines 102-107)",
      "description": "Chapter text mentions 'LOW/MODERATE/MEDIUM/HIGH' but should consistently use 'LOW/MODERATE/HIGH/SEVERE' to match ComplexityLevel enum",
      "current_content": "Chapter describes: LOW (0-5), MODERATE (6-10), HIGH (11-15), SEVERE (>15) which is correct, but note at line 108 says 'These levels match the ComplexityLevel enum' without being fully consistent",
      "should_be": "Ensure all references use the exact enum variant names: LOW/MODERATE/HIGH/SEVERE (not MEDIUM)",
      "fix_suggestion": "Review entire chapter for any mentions of 'MEDIUM' complexity and replace with proper terminology from ComplexityLevel enum",
      "source_reference": "src/refactoring/mod.rs:ComplexityLevel enum, src/io/writers/terminal.rs:183-189"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "JSON Output - EntropyScore Fields (lines 418-432)",
      "description": "Chapter shows entropy_score structure in JSON example but doesn't fully explain what each field means",
      "current_content": "Shows entropy_score with token_entropy, pattern_repetition, branch_similarity, effective_complexity but minimal explanation",
      "should_be": "Add detailed field descriptions:\n- token_entropy: Measures variety and distribution of tokens (0-1, higher = more variety)\n- pattern_repetition: Detects repeated code patterns (0-1, higher = more repetition)\n- branch_similarity: Measures similarity between branches (0-1, higher = more similar)\n- effective_complexity: Overall complexity multiplier adjusted for entropy",
      "fix_suggestion": "Add a subsection 'EntropyScore Fields' in the Field Descriptions section with detailed explanations",
      "source_reference": "features.json lines 423-432, src/complexity/entropy_core.rs"
    },
    {
      "type": "incomplete_explanation",
      "severity": "medium",
      "section": "Terminal Output Customization (line 151)",
      "description": "Chapter mentions FormattingConfig customization but says options are 'currently not exposed through CLI'",
      "current_content": "Note states: 'Terminal output formatting can be customized internally via FormattingConfig. These customization options are currently not exposed through the CLI interface.'",
      "should_be": "Clarify what FormattingConfig controls (color mode, emoji mode) and whether/how users can customize it",
      "fix_suggestion": "Document that --plain flag uses FormattingConfig to disable colors/emoji, and clarify if there are other ways to customize (config file, env vars)",
      "source_reference": "src/formatting/mod.rs:58-61 (FormattingConfig struct with color and emoji fields)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Verbosity Levels (lines 154-216)",
      "description": "Chapter documents -v/-vv/-vvv flags but doesn't explicitly state these only affect terminal output",
      "current_content": "Shows verbosity examples and output differences but doesn't mention format-specific behavior",
      "should_be": "Add note: 'Verbosity flags affect terminal output only. JSON and markdown formats include all data regardless of verbosity level.'",
      "fix_suggestion": "Add this clarification at line 176 after the verbosity features list",
      "source_reference": "src/commands/analyze.rs:159 (verbosity in output_config), terminal-specific usage"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "JSON Output - Pretty Printing (line 273)",
      "description": "Chapter shows jq pretty-printing command but doesn't mention debtmap already pretty-prints JSON",
      "current_content": "Example: debtmap analyze . --format json | jq .",
      "should_be": "Add note: 'JSON output is automatically pretty-printed for readability.'",
      "fix_suggestion": "Add this note at line 276 after the basic usage examples",
      "source_reference": "src/io/writers/json.rs:19 (uses serde_json::to_string_pretty)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Enhanced Markdown Features (lines 638-648)",
      "description": "Chapter mentions enhanced markdown features but doesn't explain how to enable them",
      "current_content": "Lists features (complexity charts, risk heat maps, etc.) with note: 'specific flags or configuration options to enable them are not currently documented'",
      "should_be": "Either document the flags/options to enable enhanced markdown, or clarify implementation status",
      "fix_suggestion": "Investigate src/io/writers/enhanced_markdown/ module to determine if this is exposed via CLI or config, then document accordingly",
      "source_reference": "src/io/writers/enhanced_markdown/ (contains 12 module files for enhanced features)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Output Filtering (lines 963-1003)",
      "description": "Chapter documents filtering options but doesn't clarify how they apply across different output formats",
      "current_content": "Note at line 967 says 'Filtering options apply to all output formats' but doesn't explain format-specific behavior",
      "should_be": "Clarify that filters apply at analysis level (before formatting) vs presentation level, and any format-specific differences",
      "fix_suggestion": "Add section explaining that --top/--tail/--filter work consistently across formats since they filter the underlying data",
      "source_reference": "src/commands/analyze.rs:139-153 (filtering applied to unified_analysis before output)"
    },
    {
      "type": "correct_but_could_clarify",
      "severity": "low",
      "section": "Debt Score Thresholds (lines 110-117)",
      "description": "Debt score boundary explanations are correct but could be more explicit about edge cases",
      "current_content": "Explains Green (≤50), Yellow (51-100), Red (>100) for default threshold 100",
      "should_be": "Chapter correctly notes 'Boundary values use strict inequalities: 50 is Green, 100 is Yellow (not Red), 101+ is Red' - this is accurate",
      "fix_suggestion": "No change needed - chapter already has good clarification at line 117",
      "source_reference": "src/io/output.rs:53-59 (debt_score_status function)"
    },
    {
      "type": "correct_but_could_clarify",
      "severity": "low",
      "section": "Risk Level Classification (lines 252-257)",
      "description": "Risk level boundaries are correct but could emphasize where 60.0 falls",
      "current_content": "Shows LOW (<30), MEDIUM (30-59), HIGH (≥60) with note '60 is the start of HIGH risk level'",
      "should_be": "Chapter is accurate - 60 is start of HIGH. The note at line 257 correctly clarifies this.",
      "fix_suggestion": "No change needed - chapter already clarifies boundary correctly",
      "source_reference": "src/io/writers/terminal.rs:97-102 (classify_risk_level)"
    },
    {
      "type": "correct_important_limitation",
      "severity": "low",
      "section": "Exit Codes (lines 1094-1116)",
      "description": "Chapter correctly documents that exit codes 1 and 2 are not yet implemented",
      "current_content": "Clear note: 'IMPORTANT: Exit codes 1 and 2 are NOT YET IMPLEMENTED. Current behavior: Always returns 0 on successful analysis'",
      "should_be": "Chapter correctly documents this limitation and provides workarounds (validate command, JSON parsing)",
      "fix_suggestion": "No change needed - chapter accurately documents current behavior and planned future behavior",
      "source_reference": "Implementation always returns Ok(()) on successful analysis"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of all three output formats (terminal, JSON, markdown) with clear organization",
    "Excellent practical examples for CI/CD integration (GitHub Actions, GitLab CI, Jenkins pipelines)",
    "Extensive jq query examples for JSON manipulation - very user-friendly",
    "Accurate and detailed JSON schema documentation with field-by-field descriptions",
    "Good documentation of risk analysis output when using --lcov coverage integration",
    "Clear explanation of --plain flag for ASCII-only terminal output",
    "Filtering and output limiting options (--top, --tail, --summary) are well-documented",
    "Best Practices section provides excellent guidance on when to use each format",
    "Troubleshooting section addresses common issues (colors, JSON parsing, encoding)",
    "Tool integration examples (Python scripts, shell scripts, VS Code tasks) are practical and copy-paste ready",
    "Correctly documents exit code limitations with clear workarounds",
    "Good progression from basic to advanced usage patterns",
    "Quick reference table (lines 1041-1045) is helpful for format selection",
    "Verbosity level examples show concrete output differences at each level",
    "Debt score threshold boundaries are clearly explained with edge case clarifications",
    "Risk analysis section includes both summary and detailed output examples",
    "Webhook integration examples show real-world notification patterns"
  ],
  "improvement_suggestions": [
    "Add detailed EntropyScore field descriptions in the JSON Output section (token_entropy, pattern_repetition, etc.)",
    "Clarify FormattingConfig customization capabilities - what can users actually customize?",
    "Document enhanced markdown feature enablement or note if it's work-in-progress",
    "Add explicit note that verbosity flags (-v, -vv, -vvv) only affect terminal output",
    "Include side-by-side comparison showing legacy vs unified JSON format differences",
    "Add note about automatic JSON pretty-printing in the basic usage section",
    "Consider adding actual debtmap output samples (from real runs) alongside constructed examples",
    "Document which filtering options affect which stages (analysis vs presentation)",
    "Add examples showing the difference between --plain and default terminal output",
    "Consider adding a troubleshooting entry for common jq query mistakes"
  ],
  "metadata": {
    "analyzed_at": "2025-10-20",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "JSON output format and schema",
      "Terminal output with colors and symbols",
      "Markdown reports for documentation",
      "Integration with CI/CD pipelines",
      "Custom formatting and filtering",
      "Risk analysis output",
      "Tool integration examples"
    ],
    "validation_focus": "Verify output format documentation matches src/io/ implementation"
  }
}
