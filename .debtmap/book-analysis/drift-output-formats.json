{
  "chapter_id": "output-formats",
  "chapter_title": "Output Formats",
  "chapter_file": "book/src/output-formats.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter is comprehensive and well-structured, covering all three output formats with extensive examples. Most content accurately reflects implementation. Main drift issues are terminology inconsistencies in complexity classifications, minor inaccuracies in output examples, and some missing clarifications about feature applicability across formats. Overall quality is high with excellent CI/CD integration examples.",
  "issues": [
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Terminal Output Example (lines 56-88)",
      "description": "The example terminal output shows debt score format that may not exactly match actual implementation output",
      "current_content": "Total debt score:    156 (threshold: 100)",
      "should_be": "Format should match format_debt_score which colors the score and adds '(threshold: N)' - example is close but verify exact spacing and color coding",
      "fix_suggestion": "Run actual debtmap command and copy real output to ensure example matches implementation exactly",
      "source_reference": "src/io/writers/terminal.rs:142-149 (format_debt_score function)"
    },
    {
      "type": "outdated_information",
      "severity": "medium",
      "section": "Terminal Output - Complexity Classification (lines 102-107)",
      "description": "Chapter uses inconsistent terminology (LOW/MODERATE/MEDIUM/HIGH) that doesn't match implementation enum (LOW/MODERATE/HIGH/SEVERE)",
      "current_content": "**Complexity Classification:**\n- **LOW** (0-5): Green\n- **MODERATE** (6-10): Yellow\n- **HIGH** (11-15): Orange\n- **SEVERE** (>15): Red",
      "should_be": "Should match ComplexityLevel enum:\n- LOW (0-5)\n- MODERATE (6-10)\n- HIGH (11-15)\n- SEVERE (>15)\n\nChapter currently shows LOW/MODERATE/MEDIUM/HIGH instead",
      "fix_suggestion": "Update complexity classification section to use consistent terminology matching src/refactoring::ComplexityLevel: LOW/MODERATE/HIGH/SEVERE",
      "source_reference": "src/io/writers/terminal.rs:183-189 (classify_complexity_level), src/refactoring/mod.rs (ComplexityLevel enum)"
    },
    {
      "type": "incorrect_example",
      "severity": "low",
      "section": "Terminal Output - Debt Score Thresholds (lines 108-114)",
      "description": "Debt score threshold boundaries are correct but could be more precise about boundary values",
      "current_content": "Green (≤50): Healthy - Below half threshold\nYellow (51-100): Attention needed - Between half and full threshold\nRed (>100): Action required - Exceeds threshold",
      "should_be": "Boundaries are:\n- Green: score ≤ threshold/2 (≤50 for default 100)\n- Yellow: threshold/2 < score ≤ threshold (51-100)\n- Red: score > threshold (>100)",
      "fix_suggestion": "Add explicit note that boundary values use strict inequalities: 50 is Green, 100 is Yellow (not Red), 101+ is Red",
      "source_reference": "src/io/output.rs:53-59 (debt_score_status function), tests at lines 294-321"
    },
    {
      "type": "incorrect_example",
      "severity": "low",
      "section": "Terminal Output - Refactoring Guidance (lines 125-129)",
      "description": "Refactoring guidance messages are paraphrased rather than using exact implementation wording",
      "current_content": "Guidance levels:\n- **Moderate** (6-10): Extract 2-3 pure functions using direct functional transformation\n- **High** (11-15): Extract 3-5 pure functions using decompose-then-transform strategy\n- **Severe** (>15): Extract 5+ pure functions into modules with functional core/imperative shell",
      "should_be": "Exact messages from get_refactoring_action_message:\n- MODERATE: 'Extract 2-3 pure functions using direct functional transformation'\n- HIGH: 'Extract 3-5 pure functions using decompose-then-transform strategy'\n- SEVERE: 'Extract 5+ pure functions into modules with functional core/imperative shell'",
      "fix_suggestion": "Use exact wording from implementation, especially 'decompose-then-transform' terminology",
      "source_reference": "src/io/writers/terminal.rs:193-205 (get_refactoring_action_message)"
    },
    {
      "type": "incorrect_example",
      "severity": "low",
      "section": "Risk Analysis Output - Risk Level Classification (lines 244-248)",
      "description": "Risk level boundaries could be clearer about where boundary values fall",
      "current_content": "**Risk Level Classification:**\n- **LOW** (<30): Green\n- **MEDIUM** (30-59): Yellow\n- **HIGH** (≥60): Red",
      "should_be": "Implementation logic:\n- LOW: score < 30.0\n- MEDIUM: 30.0 ≤ score < 60.0 (chapter shows 30-59 which implies 60 is excluded)\n- HIGH: score ≥ 60.0",
      "fix_suggestion": "Chapter is actually correct with (30-59) notation. No change needed, but could add explicit note that 60 is start of HIGH.",
      "source_reference": "src/io/writers/terminal.rs:97-102 (classify_risk_level function)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Terminal Output Structure",
      "description": "Chapter doesn't document FormattingConfig capability for customizing terminal output",
      "should_add": "Terminal output formatting can be customized via FormattingConfig (colors, symbols, etc.)",
      "fix_suggestion": "Add subsection or note about terminal output customization options if they're exposed to users",
      "source_reference": "src/io/writers/terminal.rs:20-29 (TerminalWriter::new and with_formatting methods)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "JSON Output - Field Descriptions (lines 397-425)",
      "description": "Chapter documents entropy_score field but doesn't detail the EntropyScore structure",
      "current_content": "entropy_score field shown in example with structure but no detailed field descriptions",
      "should_be": "Add detailed descriptions for EntropyScore fields:\n- token_entropy: Token distribution entropy (0-1)\n- pattern_repetition: Pattern repetition score (0-1)  \n- branch_similarity: Branch similarity metric (0-1)\n- effective_complexity: Adjusted complexity multiplier",
      "fix_suggestion": "Add subsection documenting EntropyScore structure fields with descriptions from features.json",
      "source_reference": "features.json lines 411-418, src/complexity/entropy_core.rs"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "JSON Output",
      "description": "Chapter doesn't explicitly mention that JSON is pretty-printed by default",
      "should_add": "Note that JSON output is automatically pretty-printed for readability",
      "fix_suggestion": "Add note in Basic Usage section (around line 263) that debtmap pretty-prints JSON by default",
      "source_reference": "src/io/writers/json.rs:19 (serde_json::to_string_pretty)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Verbosity Levels (lines 147-207)",
      "description": "Chapter documents verbosity levels but doesn't clarify if they affect JSON/markdown output or only terminal",
      "should_add": "Clarify which output formats are affected by -v/-vv/-vvv flags",
      "fix_suggestion": "Add note about verbosity flag applicability to different output formats (likely terminal-only)",
      "source_reference": "src/cli.rs:94-99 (verbosity flag in analyze command)"
    },
    {
      "type": "outdated_information",
      "severity": "medium",
      "section": "Troubleshooting - Exit Codes (lines 1074-1094)",
      "description": "Chapter correctly notes exit code behavior as 'planned' but could be clearer about current limitations",
      "current_content": "Note says 'Currently, debtmap returns exit code 0 on successful analysis regardless of threshold violations. Planned behavior includes...'",
      "should_be": "Emphasize more clearly that planned exit codes (1 for threshold violations, 2 for errors) are NOT currently implemented",
      "fix_suggestion": "Strengthen language: 'Exit codes 1 and 2 are NOT YET IMPLEMENTED. Current behavior: Always returns 0 on success. Use validate command or parse JSON for threshold enforcement.'",
      "source_reference": "Current implementation always returns 0 on successful analysis"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Enhanced Markdown Features (lines 619-630)",
      "description": "Chapter vaguely references enhanced markdown but doesn't explain how to enable it",
      "current_content": "Enhanced markdown is generated when using specific analysis flags (see source code for configuration options)",
      "should_be": "Either document specific flags that enable enhanced markdown or clarify implementation status",
      "fix_suggestion": "Investigate enhanced_markdown module and document which flags enable these features, or note if this is work-in-progress",
      "source_reference": "src/io/writers/enhanced_markdown/ directory with multiple modules"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Output Filtering",
      "description": "Chapter documents filtering flags but doesn't explain format-specific behavior",
      "should_add": "Clarify how --top, --tail, --summary, --filter work across different output formats (terminal vs JSON vs markdown)",
      "fix_suggestion": "Add section explaining which filtering options apply to which formats and any format-specific behavior differences",
      "source_reference": "src/cli.rs:74-119 (filtering flags in analyze command)"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of all three output formats with clear organization",
    "Excellent real-world examples for CI/CD integration (GitHub Actions, GitLab CI, Jenkins)",
    "Thorough jq query examples for JSON manipulation - very practical",
    "Good documentation of risk analysis output format with --lcov",
    "Accurate JSON schema with detailed field descriptions",
    "Clear explanation of --plain flag and its purpose",
    "Filtering and output limiting options are well-documented",
    "Best practices section provides valuable guidance on when to use each format",
    "Troubleshooting section addresses common issues",
    "Tool integration examples (Python, shell scripts, VS Code) are practical",
    "Correctly documents exit code limitations with appropriate note",
    "Good progression from basic to advanced usage patterns",
    "Quick reference table (line 1019-1025) is helpful"
  ],
  "improvement_suggestions": [
    "Update complexity classification terminology to consistently use LOW/MODERATE/HIGH/SEVERE matching implementation",
    "Add side-by-side comparison of legacy vs unified JSON formats",
    "Include concrete examples showing what each verbosity level (-v, -vv, -vvv) adds to output",
    "Document EntropyScore structure fields in JSON output section",
    "Clarify which features (verbosity, filtering) apply to which output formats",
    "Verify and document enhanced markdown features or note implementation status",
    "Add examples of actual debtmap output (copy-paste from real runs) rather than constructed examples",
    "Include example showing difference between plain and colored terminal output side-by-side",
    "Add flowchart or decision tree: 'Which output format should I use?'",
    "Document any FormattingConfig options if exposed to users",
    "Strengthen exit code limitations note to emphasize they're not yet implemented",
    "Add examples showing combined use of multiple output formats in workflows"
  ],
  "metadata": {
    "analyzed_at": "2025-10-14",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [
      "Format selection (terminal, JSON, markdown)",
      "Terminal output structure and color coding",
      "JSON schema and field descriptions",
      "Markdown report structure",
      "CI/CD integration examples",
      "Output filtering and limiting",
      "Verbosity levels",
      "Plain mode",
      "Tool integration (jq, editors, webhooks)",
      "Risk analysis output",
      "Exit codes and validation",
      "Legacy vs unified JSON formats"
    ],
    "validation_focus": "Verify output format documentation matches src/io/ implementation"
  }
}
