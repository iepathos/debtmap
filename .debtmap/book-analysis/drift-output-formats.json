{
  "chapter_id": "output-formats",
  "chapter_title": "Output Formats",
  "chapter_file": "book/src/output-formats.md",
  "drift_detected": true,
  "severity": "critical",
  "quality_assessment": "Chapter is completely empty with only TODO placeholders. All documentation is missing for a critical user-facing feature. Users have no guidance on output formats, JSON schema, text reports, tool integration, or custom formatting.",
  "issues": [
    {
      "type": "missing_content",
      "severity": "high",
      "section": "JSON Output",
      "description": "Chapter has TODO placeholder for JSON output documentation. No JSON schema documented.",
      "current_content": "TODO: Document JSON output schema",
      "should_add": "Document the complete JSON schema for AnalysisResults structure, including all fields in ComplexityReport, TechnicalDebtReport, DependencyReport, FunctionMetrics, and DebtItem. Document the two JSON formats: legacy (with {File: {...}} wrappers) and unified (with consistent structure and 'type' field).",
      "fix_suggestion": "Add comprehensive JSON schema documentation with examples:\n1. Document --output-format flag (legacy vs unified)\n2. Show example JSON output for both formats\n3. Document all top-level fields: project_path, timestamp, complexity, technical_debt, dependencies, duplications\n4. Document nested structures with field descriptions\n5. Include example showing how to parse and use JSON output\n6. Document serde serialization format (pretty-printed by default)",
      "source_reference": "src/io/writers/json.rs:JsonWriter, src/core/mod.rs:AnalysisResults, src/cli.rs:JsonFormat (lines 320-326)"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Text Reports",
      "description": "Chapter has TODO placeholder for text report documentation. Terminal output format completely undocumented.",
      "current_content": "TODO: Document text report format",
      "should_add": "Document the terminal output format with color coding, emoji indicators, and structured sections",
      "fix_suggestion": "Add terminal output format documentation:\n1. Document --format terminal flag (default)\n2. Show example terminal output with sections: header, summary, complexity hotspots, technical debt, pass/fail status\n3. Document color coding: green (✅ good), yellow (⚠️ medium), red (❌ high)\n4. Explain status indicators and what they mean\n5. Document complexity classification levels (Low ≤5, Moderate 5-10, Medium 10-15, High >15)\n6. Document debt status thresholds (Low ≤10, Moderate 10-20, Medium 20-50, High >50)\n7. Explain refactoring guidance messages for complex functions\n8. Document plain output mode (--plain flag for ASCII-only, no colors, no emoji)",
      "source_reference": "src/io/writers/terminal.rs:TerminalWriter, src/io/output.rs:complexity_status, debt_status functions (lines 27-59)"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Markdown Output",
      "description": "Markdown output format is completely undocumented, including both standard and enhanced variants",
      "should_add": "Document markdown output format and enhanced markdown features",
      "fix_suggestion": "Add markdown output documentation:\n1. Document --format markdown flag\n2. Show example markdown structure: Executive Summary, Complexity Analysis, Technical Debt, Dependencies\n3. Document enhanced markdown writer features (src/io/writers/enhanced_markdown/):\n   - Executive summary with health dashboard\n   - Quick wins section\n   - Strategic priorities\n   - Team guidance\n   - Success metrics\n   - Visualizations (complexity distribution, risk heat maps, dependency graphs)\n   - Risk analysis section\n   - Priority matrix\n   - Actionable items\n4. Document configuration options for enhanced markdown (DetailLevel, include_visualizations, include_statistics)\n5. Show how markdown can be rendered to HTML or PDF",
      "source_reference": "src/io/writers/markdown/mod.rs, src/io/writers/enhanced_markdown/mod.rs:EnhancedMarkdownWriter"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Output File Handling",
      "description": "No documentation on how to write output to files vs stdout",
      "should_add": "Document the --output flag for writing results to files",
      "fix_suggestion": "Add section on output file handling:\n1. Document -o, --output <FILE> flag\n2. Explain default behavior (stdout)\n3. Show examples of writing to files: debtmap analyze . --format json -o report.json\n4. Note that all formats can be redirected to files\n5. Explain how output path affects relative paths in reports",
      "source_reference": "src/cli.rs lines 40-42 (analyze command output parameter)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Integration with Tools",
      "description": "Chapter has TODO placeholder for tool integration documentation. No guidance on CI/CD, editors, or other tools.",
      "current_content": "TODO: How to integrate with other tools",
      "should_add": "Document how to integrate debtmap output with CI/CD pipelines, editors, and other tools",
      "fix_suggestion": "Add integration examples:\n1. CI/CD Integration:\n   - GitHub Actions example using JSON output\n   - GitLab CI example with thresholds\n   - Jenkins pipeline integration\n   - Exit codes for validation failures\n2. Editor Integration:\n   - VSCode task configuration\n   - Parsing JSON for problem matcher\n   - Using markdown reports in documentation\n3. Tool Chaining:\n   - Using with coverage tools (--coverage-file flag)\n   - Combining with linters\n   - Feeding into dashboards\n4. Parsing Examples:\n   - jq commands for JSON filtering\n   - Python script to parse JSON\n   - Shell script to check thresholds",
      "source_reference": "src/cli.rs (coverage_file, validate command), src/commands/validate.rs"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Custom Formatting",
      "description": "Chapter has TODO placeholder for custom formatting. No information on how to extend or customize output.",
      "current_content": "TODO: Creating custom output formats",
      "should_add": "Document how to create custom output formats or customize existing ones",
      "fix_suggestion": "Add custom formatting documentation:\n1. Explain OutputWriter trait (src/io/output.rs lines 13-16)\n2. Show how to implement custom writer:\n   - Implement write_results method\n   - Implement write_risk_insights method\n   - Register with create_writer factory\n3. Document existing helper functions for custom formatters:\n   - complexity_status, debt_status, high_complexity_status\n   - get_recommendation, get_top_complex_functions\n   - build_summary_rows\n4. Show example of custom writer (e.g., CSV, HTML, XML)\n5. Explain how to use JSON output as basis for custom tools\n6. Document FormattingConfig for terminal output customization",
      "source_reference": "src/io/output.rs:OutputWriter trait, create_writer function (lines 13-24)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Format Selection",
      "description": "No documentation on how to select output formats via CLI",
      "should_add": "Document the -f, --format flag and available format options",
      "fix_suggestion": "Add format selection documentation:\n1. Document -f, --format <FORMAT> flag\n2. List available formats: json, markdown, terminal (default)\n3. Show examples:\n   - debtmap analyze . --format json\n   - debtmap analyze . --format markdown -o report.md\n   - debtmap analyze . (uses terminal by default)\n4. Document format-specific options:\n   - JSON: --output-format (legacy vs unified)\n   - Terminal: --plain (ASCII-only mode)\n   - Markdown: detail levels, visualizations\n5. Explain when to use each format",
      "source_reference": "src/cli.rs:OutputFormat enum (lines 314-318), analyze command format parameter (line 32)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Risk Analysis Output",
      "description": "Risk analysis output format not documented",
      "should_add": "Document risk insights output format and fields",
      "fix_suggestion": "Add risk analysis output documentation:\n1. Explain RiskInsight structure in JSON output\n2. Document terminal risk output sections:\n   - Risk summary with codebase risk score\n   - Risk distribution (critical, high, medium, low, well tested)\n   - Critical risks section\n   - Recommendations with ROI\n3. Document risk level classification (LOW <30, MEDIUM 30-60, HIGH >60)\n4. Explain complexity-coverage correlation\n5. Show example of risk-focused output",
      "source_reference": "src/io/writers/terminal.rs:write_risk_insights (lines 46-74), src/risk/insights.rs"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Output Filtering",
      "description": "Output filtering and limiting options not documented",
      "should_add": "Document filtering and limiting output options",
      "fix_suggestion": "Add filtering documentation:\n1. Document --top N flag (show only top N priority items)\n2. Document --tail N flag (show bottom N lowest priority items)\n3. Document --summary flag (compact tiered priority display)\n4. Document --min-priority flag (filter by minimum priority level)\n5. Document --filter flag (filter by debt categories)\n6. Document --group-by-category flag\n7. Show examples of combining filters",
      "source_reference": "src/cli.rs analyze command (lines 74-119), src/output/formatters.rs:determine_priority_output_format"
    }
  ],
  "positive_aspects": [
    "Chapter exists in table of contents with clear title",
    "Topics list is comprehensive and covers all major aspects",
    "Structure uses logical sections matching user needs"
  ],
  "improvement_suggestions": [
    "Prioritize JSON schema documentation first as it's most commonly used for programmatic integration",
    "Include visual examples (screenshots) of terminal output showing color coding and structure",
    "Add a quick reference table comparing format features (JSON: machine-readable, Markdown: reports, Terminal: interactive)",
    "Include real-world examples from actual project analysis",
    "Add troubleshooting section for common output issues (encoding, terminal color support, file permissions)",
    "Consider adding a 'Best Practices' section on when to use each format",
    "Link to related chapters on validation and configuration",
    "Add examples of using different formats in CI/CD pipelines"
  ],
  "metadata": {
    "analyzed_at": "2025-10-09",
    "feature_inventory": "src/io/output.rs, src/io/writers/*, src/cli.rs",
    "topics_covered": [],
    "validation_focus": "Verify output format documentation matches src/io/ implementation"
  }
}
