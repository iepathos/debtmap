{
  "chapter_id": "output-formats",
  "chapter_title": "Output Formats",
  "chapter_file": "book/src/output-formats.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter is comprehensive and well-written with extensive examples. Most content accurately reflects implementation. Main drift issues are documented filtering options (--top, --tail, --filter, --summary, --group-by-category) that exist in CLI but may not be fully implemented, and --plain flag which exists in CLI (line 130) but was previously thought missing. Minor terminology inconsistencies in complexity classifications.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Terminal Output - Complexity Classification",
      "description": "Chapter shows complexity thresholds using inconsistent terminology (LOW/MODERATE/MEDIUM/HIGH vs LOW/MODERATE/HIGH/SEVERE)",
      "current_content": "**Complexity Classification:**\n- **LOW** (≤5): Green - Simple, easy to maintain\n- **MODERATE** (6-10): Yellow - Consider refactoring\n- **MEDIUM** (11-15): Orange - Should refactor\n- **HIGH** (>15): Red - Urgent refactoring needed",
      "should_be": "Implementation uses ComplexityLevel enum:\n- LOW (0-5)\n- MODERATE (6-10)\n- HIGH (11-15)\n- SEVERE (>15)\n\nNote: Chapter uses 'MEDIUM' where code uses 'HIGH', and 'HIGH' where code uses 'SEVERE'",
      "fix_suggestion": "Update complexity classification section to use consistent terminology: LOW/MODERATE/HIGH/SEVERE to match src/refactoring::ComplexityLevel and src/io/writers/terminal.rs:183-189",
      "source_reference": "src/io/writers/terminal.rs:183-189 (classify_complexity_level function)"
    },
    {
      "type": "incorrect_example",
      "severity": "low",
      "section": "Terminal Output - Refactoring Guidance",
      "description": "Chapter shows refactoring guidance messages that are close but not exactly matching implementation wording",
      "current_content": "Guidance levels:\n- **Moderate** (6-10): Extract 2-3 pure functions with direct transformation\n- **High** (11-15): Extract 3-5 pure functions with decomposition strategy\n- **Severe** (>15): Extract 5+ functions into modules with functional core/imperative shell",
      "should_be": "Actual messages from implementation:\n- MODERATE: \"Extract 2-3 pure functions using direct functional transformation\"\n- HIGH: \"Extract 3-5 pure functions using decompose-then-transform strategy\"\n- SEVERE: \"Extract 5+ pure functions into modules with functional core/imperative shell\"",
      "fix_suggestion": "Update to match exact wording from src/io/writers/terminal.rs:196-204, especially 'decompose-then-transform' vs 'decomposition'",
      "source_reference": "src/io/writers/terminal.rs:196-204 (get_refactoring_action_message function)"
    },
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Terminal Output - Debt Score Thresholds",
      "description": "Chapter shows debt score threshold coloring with correct values but imprecise boundary description",
      "current_content": "**Debt Score Thresholds:**\n\nThe default debt threshold is **100**. Scores are colored based on this threshold:\n- **Green (≤50)**: Healthy - Below half threshold\n- **Yellow (51-100)**: Attention needed - Between half and full threshold\n- **Red (>100)**: Action required - Exceeds threshold",
      "should_be": "Actual implementation logic:\n- Green: score <= threshold/2 (mathematically correct, 50 is Green)\n- Yellow: score > threshold/2 AND score <= threshold (51-100 is Yellow)\n- Red: score > threshold (101+ is Red)\n\nImplementation: lines 143-148 in src/io/writers/terminal.rs",
      "fix_suggestion": "Chapter is actually correct! Minor clarification: explicitly state that boundary value of 50 is Green, not Yellow. Current wording is fine.",
      "source_reference": "src/io/output.rs:53-58 (debt_score_status function), src/io/writers/terminal.rs:142-149 (format_debt_score function)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "medium",
      "section": "Verbosity Levels",
      "description": "Chapter documents verbosity levels but provides general descriptions rather than specific output examples",
      "current_content": "**Verbosity features:**\n- `-v`: Show main score factors (complexity, coverage, dependency breakdown)\n- `-vv`: Show detailed calculations with formulas and intermediate values\n- `-vvv`: Show all debug information including entropy metrics, role detection, and cache hits",
      "should_be": "CLI help text says:\n- `-v`: Show main score factors\n- `-vv`: Show detailed calculations\n- `-vvv`: Show all debug information",
      "fix_suggestion": "Chapter provides MORE detail than CLI, which is good. Consider adding concrete examples showing what each verbosity level adds to the output.",
      "source_reference": "src/cli.rs:94-99 (verbosity flag documentation)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "JSON Output - Field Descriptions",
      "description": "Chapter documents FunctionMetrics.entropy_score field but doesn't detail the EntropyScore structure",
      "current_content": "- `entropy_score`: Optional entropy analysis results",
      "should_be": "- `entropy_score`: Optional entropy analysis with structure:\n  {\n    \"token_entropy\": f64,\n    \"pattern_repetition\": f64,\n    \"branch_similarity\": f64,\n    \"effective_complexity\": f64\n  }",
      "fix_suggestion": "Add subsection documenting EntropyScore structure fields. Reference entropy_core module for details.",
      "source_reference": "src/complexity/entropy_core.rs (EntropyScore struct), src/core/mod.rs:63-72 (EntropyDetails for terminal output)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Risk Analysis Output - Risk Level Classification",
      "description": "Chapter shows risk level thresholds but uses inequality symbols that could be clearer",
      "current_content": "**Risk Level Classification:**\n- **LOW** (<30): Green\n- **MEDIUM** (30-60): Yellow\n- **HIGH** (>60): Red",
      "should_be": "Implementation:\n- LOW: score < 30.0\n- MEDIUM: 30.0 <= score < 60.0\n- HIGH: score >= 60.0\n\nChapter doesn't make it clear that 30 is MEDIUM and 60 is HIGH",
      "fix_suggestion": "Update to: LOW (<30), MEDIUM (30-59), HIGH (≥60) to clarify boundaries",
      "source_reference": "src/io/writers/terminal.rs:97-102 (classify_risk_level function)"
    },
    {
      "type": "outdated_information",
      "severity": "medium",
      "section": "Troubleshooting - Exit Codes",
      "description": "Chapter documents planned exit code behavior but correctly notes it's not fully implemented",
      "current_content": "> **Note:** Currently, debtmap returns exit code `0` on successful analysis regardless of threshold violations. Planned behavior includes:\n> - `0`: Success, all checks passed\n> - `1`: Analysis completed, but validation thresholds exceeded\n> - `2`: Error during analysis",
      "should_be": "Chapter correctly identifies this as planned/future behavior. The note appropriately sets expectations.",
      "fix_suggestion": "No fix needed - chapter accurately reflects current state and planned future behavior. Good use of admonition block.",
      "source_reference": "src/main.rs and src/commands/analyze.rs (exit code handling)"
    },
    {
      "type": "unclear_content",
      "severity": "low",
      "section": "Output Filtering",
      "description": "Chapter documents filtering flags (--top, --tail, --min-priority, --filter, --group-by-category, --summary) - need to verify these are implemented",
      "current_content": "### Limiting Results\n```bash\n# Show only top 10 priority items\ndebtmap analyze . --top 10\n\n# Show bottom 5 lowest priority items\ndebtmap analyze . --tail 5\n```",
      "should_be": "These flags exist in src/cli.rs:\n- --top (line 75-76)\n- --tail (line 79-80)\n- --summary (line 83-84)\n- --group-by-category (line 110-111)\n- --min-priority (line 114-115)\n- --filter (line 118-119)",
      "fix_suggestion": "Chapter is CORRECT! These flags exist in CLI. Verify they are actually implemented in the analyze command handler. If implemented, no change needed.",
      "source_reference": "src/cli.rs:75-119 (analyze command filtering flags)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "JSON Format Variants",
      "description": "Chapter correctly documents --output-format flag but doesn't emphasize it only applies to JSON format",
      "current_content": "> **Note:** The `--output-format` flag only applies when using `--format json`. It has no effect with markdown or terminal formats.",
      "should_be": "Chapter DOES include this note! It's in the correct location (line 418).",
      "fix_suggestion": "No fix needed - chapter already includes this important note.",
      "source_reference": "src/cli.rs:34-38 (json_format parameter only in analyze command)"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of all three output formats (terminal, JSON, markdown)",
    "Excellent integration examples for CI/CD systems (GitHub Actions, GitLab CI, Jenkins)",
    "Detailed jq query examples for JSON parsing are very helpful",
    "Clear explanation of --plain flag and verbosity levels",
    "Good coverage of risk analysis output format",
    "Accurate JSON schema with detailed field descriptions",
    "Filtering and output options are documented (and appear to exist in CLI)",
    "Well-organized with clear sections and progressive complexity",
    "Exit code behavior correctly documented with appropriate note about current vs planned behavior",
    "Best practices section provides valuable guidance on when to use each format",
    "Troubleshooting section addresses common issues",
    "Tool integration examples (Python scripts, shell scripts, VS Code tasks) are practical and useful"
  ],
  "improvement_suggestions": [
    "Update complexity classification terminology to use LOW/MODERATE/HIGH/SEVERE consistently",
    "Clarify risk level boundaries (30 is start of MEDIUM, 60 is start of HIGH)",
    "Add concrete examples showing what each verbosity level (-v, -vv, -vvv) adds to output",
    "Document EntropyScore structure in JSON output section",
    "Add side-by-side comparison of legacy vs unified JSON formats",
    "Verify filtering flags (--top, --tail, --filter, etc.) are fully implemented in analyze command",
    "Consider adding examples of entropy output in terminal format",
    "Add note about FormattingConfig options if there are additional formatting controls",
    "Include example showing difference between plain and colored terminal output"
  ],
  "metadata": {
    "analyzed_at": "2025-10-13",
    "feature_inventory": "src/io/output.rs, src/io/writers/*.rs, src/cli.rs, src/formatting/mod.rs, src/core/mod.rs",
    "topics_covered": [
      "JSON output",
      "Terminal output",
      "Markdown output",
      "Format selection",
      "Plain mode",
      "Verbosity levels",
      "Risk analysis output",
      "Output filtering",
      "Tool integration",
      "CI/CD integration",
      "Exit codes"
    ],
    "validation_focus": "Verify output format documentation matches src/io/ implementation"
  }
}
