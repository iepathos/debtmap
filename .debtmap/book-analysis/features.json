{
  "cli_commands": {
    "analyze": {
      "description": "Analyze code for complexity and technical debt",
      "common_options": [
        "path",
        "format (json/markdown/terminal)",
        "output",
        "threshold-complexity",
        "threshold-duplication",
        "languages",
        "coverage-file (lcov)",
        "top/tail filtering",
        "summary mode",
        "verbosity levels (-v, -vv, -vvv)",
        "compact mode",
        "plain mode (ASCII-only)"
      ],
      "advanced_options": [
        "enable-context",
        "context-providers",
        "disable-context",
        "semantic-off",
        "group-by-category",
        "min-priority",
        "filter-categories",
        "no-context-aware",
        "threshold-preset (strict/balanced/lenient)"
      ],
      "parallel_processing": [
        "no-parallel",
        "jobs (thread count)"
      ],
      "caching": [
        "cache (enabled by default)",
        "no-cache",
        "clear-cache",
        "force-cache-rebuild",
        "cache-stats",
        "migrate-cache",
        "cache-location"
      ],
      "advanced_analysis": [
        "multi-pass",
        "show-attribution",
        "detail-level (summary/standard/comprehensive/debug)",
        "aggregate-only",
        "no-aggregation",
        "aggregation-method",
        "min-problematic",
        "no-god-object",
        "max-files",
        "validate-loc",
        "no-public-api-detection",
        "public-api-threshold",
        "no-pattern-detection",
        "patterns",
        "pattern-threshold",
        "show-pattern-warnings"
      ],
      "call_graph": [
        "debug-call-graph",
        "trace-functions",
        "call-graph-stats-only",
        "debug-format (text/json)",
        "validate-call-graph",
        "show-dependencies",
        "no-dependencies",
        "max-callers",
        "max-callees",
        "show-external",
        "show-std-lib"
      ],
      "functional_analysis": [
        "ast-functional-analysis",
        "functional-analysis-profile (strict/balanced/lenient)"
      ],
      "use_cases": [
        "Code quality assessment",
        "Technical debt tracking",
        "Complexity hotspot identification",
        "Coverage gap analysis",
        "Priority-based refactoring planning",
        "CI/CD quality gates"
      ]
    },
    "init": {
      "description": "Initialize debtmap configuration file",
      "options": ["force"],
      "use_cases": ["Project setup", "Configuration management"]
    },
    "validate": {
      "description": "Validate project against technical debt thresholds",
      "options": [
        "path",
        "config",
        "coverage-file",
        "format",
        "output",
        "enable-context",
        "context-providers",
        "disable-context",
        "max-debt-density",
        "top",
        "tail",
        "semantic-off",
        "verbosity",
        "no-parallel",
        "jobs"
      ],
      "use_cases": [
        "Quality gate enforcement",
        "CI/CD integration",
        "Regression prevention",
        "Debt density monitoring"
      ]
    },
    "compare": {
      "description": "Compare technical debt between two analysis results",
      "options": [
        "before (JSON file path)",
        "after (JSON file path)",
        "plan (optional)",
        "target-location",
        "format",
        "output"
      ],
      "use_cases": [
        "Refactoring validation",
        "Progress tracking",
        "Impact assessment",
        "Before/after analysis"
      ]
    },
    "validate-improvement": {
      "description": "Validate that a refactoring improved code quality",
      "options": [
        "comparison (comparison JSON)",
        "output",
        "previous-validation",
        "threshold",
        "format",
        "quiet"
      ],
      "use_cases": [
        "Automated validation workflows",
        "Quality improvement verification",
        "Regression detection",
        "CI/CD quality checks"
      ]
    }
  },
  "core_analysis": {
    "complexity_metrics": {
      "measured_metrics": {
        "cyclomatic_complexity": "Count of decision points (if, match, while, etc.)",
        "cognitive_complexity": "Weighted measure of code understandability",
        "nesting_depth": "Maximum levels of nested control structures",
        "loc": "Lines of code in the function",
        "parameter_count": "Number of function parameters"
      },
      "estimated_metrics": {
        "est_branches": {
          "description": "Estimated execution paths (formula-based approximation)",
          "formula": "max(nesting_depth, 1) × cyclomatic_complexity ÷ 3",
          "purpose": "Estimate test cases needed for branch coverage",
          "note": "This is an ESTIMATE, not a count from the AST"
        }
      },
      "terminology_notes": [
        "Measured metrics are precise, repeatable, suitable for thresholds",
        "Estimated metrics are approximate, useful for prioritization and heuristics",
        "Use cyclomatic_complexity for code quality gates",
        "Use est_branches for estimating testing effort"
      ]
    },
    "language_support": {
      "rust": {
        "parser": "tree-sitter-rust",
        "features": [
          "Full AST analysis",
          "Macro expansion tracking",
          "Trait implementation analysis",
          "Type registry",
          "Call graph construction",
          "Data flow analysis",
          "Purity detection",
          "Error handling patterns"
        ]
      },
      "python": {
        "parser": "tree-sitter-python",
        "features": [
          "Full AST analysis",
          "Import tracking",
          "Cross-module analysis",
          "Async pattern detection",
          "Exception flow analysis",
          "Type inference",
          "Call graph construction",
          "Dead code detection"
        ]
      },
      "javascript": {
        "parser": "tree-sitter-javascript",
        "features": [
          "Full AST analysis",
          "Dependency tracking",
          "Framework pattern detection",
          "Test detection",
          "Complexity calculation"
        ]
      },
      "typescript": {
        "parser": "tree-sitter-typescript",
        "features": [
          "Full AST analysis",
          "Type-aware analysis",
          "Dependency tracking",
          "Framework pattern detection",
          "Test detection"
        ]
      }
    },
    "analysis_algorithms": {
      "call_graph": {
        "capabilities": [
          "Cross-module call tracking",
          "Trait resolution",
          "Macro expansion",
          "Function pointer handling",
          "Framework pattern recognition",
          "Centrality metrics",
          "Clustering coefficient",
          "Dependency analysis"
        ],
        "use_cases": [
          "Understanding code dependencies",
          "Impact analysis",
          "Refactoring planning",
          "Architecture validation"
        ]
      },
      "data_flow": {
        "capabilities": [
          "Variable tracking",
          "Type flow analysis",
          "Purity detection",
          "Side effect analysis"
        ]
      },
      "pattern_detection": {
        "design_patterns": [
          "Factory",
          "Strategy",
          "Observer",
          "Singleton",
          "Dependency Injection",
          "Template Method",
          "Callback"
        ],
        "framework_patterns": [
          "CLI patterns",
          "Database patterns",
          "Web patterns",
          "Testing patterns"
        ]
      }
    }
  },
  "debt_detection": {
    "debt_categories": {
      "complexity": {
        "weight": 5,
        "detection": "High cyclomatic or cognitive complexity",
        "thresholds": "Configurable via CLI or presets"
      },
      "duplication": {
        "weight": 4,
        "detection": "Code clone detection",
        "thresholds": "Line-based similarity"
      },
      "error_handling": {
        "weight": 4,
        "patterns": [
          "Error swallowing",
          "Panic patterns",
          "Missing context",
          "Improper propagation",
          "Async error handling"
        ]
      },
      "code_smells": {
        "weight": 3,
        "patterns": [
          "Long functions",
          "Too many parameters",
          "Deep nesting",
          "God objects",
          "Circular dependencies",
          "Tight coupling"
        ]
      },
      "testing": {
        "weight": 2,
        "patterns": [
          "Test complexity",
          "Test duplication",
          "Missing tests",
          "Poor test quality"
        ]
      },
      "documentation": {
        "weight": 1,
        "patterns": ["TODOs", "FIXMEs", "Missing docs"]
      },
      "organization": {
        "weight": 3,
        "patterns": [
          "God objects/files",
          "Poor module structure",
          "Mixed responsibilities"
        ]
      },
      "performance": {
        "weight": 3,
        "patterns": ["Resource management issues", "Inefficient algorithms"]
      },
      "security": {
        "weight": 5,
        "patterns": ["Unsafe code", "Input validation", "Resource leaks"]
      }
    },
    "detection_rules": {
      "context_aware": "Enabled by default, reduces false positives",
      "semantic_analysis": "Tree-sitter based AST analysis",
      "multi_pass": "Optional deeper analysis with attribution",
      "pattern_matching": "Configurable pattern detection thresholds"
    },
    "priority_system": {
      "levels": ["Critical", "High", "Medium", "Low"],
      "factors": [
        "Severity (weight: 0.5)",
        "Category (weight: 0.3)",
        "Effort (weight: 0.2)",
        "Coverage (dampening factor)",
        "Contextual risk"
      ],
      "scoring": "Priority weight × Type weight"
    }
  },
  "risk_assessment": {
    "risk_scoring": {
      "formula": "Combines complexity, coverage, and debt factors",
      "categories": [
        "Critical: High complexity (>15), low coverage (<30%)",
        "High: High complexity (>10), moderate coverage (<60%)",
        "Medium: Moderate complexity (>5), low coverage (<50%)",
        "Low: Low complexity or high coverage",
        "WellTested: High complexity with high coverage"
      ]
    },
    "test_effort_estimation": {
      "difficulty_levels": [
        "Trivial: Cognitive < 5",
        "Simple: Cognitive 5-10",
        "Moderate: Cognitive 10-20",
        "Complex: Cognitive 20-40",
        "VeryComplex: Cognitive > 40"
      ],
      "factors": [
        "Cognitive load",
        "Branch count",
        "Recommended test cases",
        "Estimated difficulty"
      ]
    },
    "risk_reduction": {
      "calculation": "Target coverage vs current risk",
      "recommendations": [
        "Testing recommendations with ROI",
        "Priority-ordered improvements",
        "Effort estimation",
        "Impact analysis"
      ]
    },
    "contextual_analysis": {
      "providers": [
        "critical_path: Identify critical execution paths",
        "dependency: Analyze function dependencies and impact",
        "git_history: Change frequency and bug correlation"
      ],
      "aggregation": "Multi-signal risk aggregation",
      "insights": "Actionable recommendations based on context"
    }
  },
  "output_formats": {
    "json": {
      "variants": {
        "legacy": "Current format with {File: {...}} and {Function: {...}} wrappers",
        "unified": "New format with consistent structure and 'type' field"
      },
      "structure": [
        "items (functions and files)",
        "total_impact",
        "total_debt_score",
        "debt_density",
        "total_lines_of_code",
        "overall_coverage",
        "has_coverage_data"
      ],
      "use_cases": [
        "CI/CD integration",
        "Programmatic analysis",
        "Comparison workflows",
        "Data processing"
      ]
    },
    "markdown": {
      "sections": [
        "Summary statistics",
        "Technical debt items",
        "Priority-ordered recommendations",
        "Risk analysis",
        "Coverage gaps"
      ],
      "use_cases": ["Documentation", "Reports", "Pull request comments"]
    },
    "terminal": {
      "features": [
        "Color-coded output",
        "ASCII art for visual hierarchy",
        "Summary tables",
        "Status indicators",
        "Progress bars",
        "Interactive feedback"
      ],
      "modes": [
        "summary: Compact overview",
        "standard: Full details",
        "compact: Minimal output",
        "plain: ASCII-only, no colors"
      ]
    }
  },
  "configuration": {
    "config_file": {
      "format": "TOML/JSON/YAML",
      "init_command": "debtmap init",
      "sections": [
        "thresholds",
        "languages",
        "exclusions",
        "context_providers",
        "output_preferences"
      ]
    },
    "threshold_presets": {
      "strict": "High code quality standards",
      "balanced": "Typical projects (default)",
      "lenient": "Legacy or complex domains"
    },
    "environment_variables": [
      "DEBTMAP_CACHE_DIR: Cache location",
      "DEBTMAP_CONTEXT_AWARE: Enable context awareness",
      "DEBTMAP_FUNCTIONAL_ANALYSIS: Enable functional analysis",
      "PRODIGY_AUTOMATION: Automation mode flag",
      "PRODIGY_VALIDATION: Validation mode flag"
    ],
    "defaults": {
      "complexity_threshold": 10,
      "duplication_threshold": 50,
      "parallel_processing": true,
      "caching": true,
      "context_aware": true
    }
  },
  "architecture": {
    "analysis_pipeline": {
      "phases": [
        "1. Discovery: Find files to analyze",
        "2. Parsing: Language-specific AST generation",
        "3. Analysis: Metric computation and pattern detection",
        "4. Aggregation: Combine results across files",
        "5. Prioritization: Score and rank issues",
        "6. Output: Format and emit results"
      ],
      "functional_design": [
        "Pure computation cores",
        "I/O at boundaries",
        "Immutable data structures (im crate)",
        "Parallel processing (rayon)",
        "Error handling with Result chains"
      ]
    },
    "dependency_injection": {
      "components": [
        "Analyzers (language-specific)",
        "Scorers (debt scoring)",
        "Cache (analysis caching)",
        "Config providers",
        "Priority calculators",
        "Formatters (output)"
      ],
      "container": "AppContainer with builder pattern"
    },
    "caching_strategy": {
      "levels": ["Project-local", "User-shared", "Custom path"],
      "granularity": "File-level with content hashing",
      "invalidation": "Content-based, manual, or forced",
      "migration": "Automatic migration support"
    }
  },
  "responsibility_analysis": {
    "god_object_detection": {
      "types": {
        "god_class": "Single struct with excessive methods (tests excluded)",
        "god_file": "File with excessive functions or lines (tests included)",
        "god_module": "Alias for god_file"
      },
      "metrics": [
        "method_count",
        "field_count",
        "responsibility_count",
        "lines_of_code",
        "complexity_sum",
        "god_object_score"
      ],
      "analysis": [
        "responsibility_count: Number of distinct responsibilities",
        "responsibilities: Named responsibility categories",
        "domain_count: Distinct semantic domains (spec 140)",
        "domain_diversity: Domain diversity score (0.0 to 1.0)",
        "struct_ratio: Ratio of structs to total functions",
        "cross_domain_severity: Severity of domain mixing"
      ],
      "recommendations": {
        "module_splits": "Suggested module boundaries",
        "confidence": "Detection confidence level",
        "analysis_method": "Method used (spec 140: hybrid, semantic, structural)"
      },
      "validation": [
        "Visibility breakdown consistency",
        "Responsibility count matching",
        "Metric consistency checks"
      ]
    },
    "method_categorization": {
      "categories": [
        "Constructors",
        "Accessors/Getters",
        "Mutators/Setters",
        "Business logic",
        "I/O operations",
        "Utilities"
      ],
      "inference": "Semantic analysis of method purpose"
    },
    "refactoring_recommendations": {
      "split_strategies": [
        "By responsibility domain",
        "By semantic grouping",
        "By structural patterns"
      ],
      "priority": "Based on god_object_score and confidence"
    }
  },
  "boilerplate_detection": {
    "pattern_detection": {
      "trait_patterns": {
        "detection": "Repetitive trait implementations",
        "thresholds": [
          "min_impl_blocks: 20",
          "method_uniformity_threshold: 0.7",
          "max_avg_complexity: 2.0",
          "confidence_threshold: 0.7"
        ]
      },
      "signals": [
        "High impl block count",
        "Uniform method signatures",
        "Low complexity",
        "Repetitive patterns"
      ]
    },
    "trait_analysis": {
      "metrics": [
        "impl_block_count",
        "shared_method_percentage",
        "average_complexity",
        "pattern_uniformity"
      ],
      "classification": "Boilerplate vs complex code"
    },
    "macro_recommendations": {
      "patterns": [
        "Derive macros",
        "Declarative macros",
        "Procedural macros",
        "Code generation"
      ],
      "confidence": "Pattern-based confidence scoring",
      "examples": "Concrete macro implementation suggestions"
    },
    "boilerplate_scoring": {
      "factors": [
        "Implementation count",
        "Method uniformity",
        "Complexity level",
        "Pattern consistency"
      ],
      "threshold": "Configurable minimum confidence"
    }
  },
  "best_practices": {
    "analysis_workflow": [
      "Start with debtmap init to create config",
      "Run initial analysis with default settings",
      "Use --coverage-file for coverage-aware analysis",
      "Filter with --top N to focus on high-priority items",
      "Use --summary for quick overview",
      "Enable --enable-context for deeper insights",
      "Use presets (--threshold-preset) for consistency",
      "Compare results with compare command"
    ],
    "ci_cd_integration": [
      "Use validate command for quality gates",
      "Set max-debt-density thresholds",
      "Output to JSON for programmatic checks",
      "Use --quiet for automation mode",
      "Compare before/after for PRs",
      "Track debt trends over time"
    ],
    "performance_optimization": [
      "Enable caching for repeated analysis",
      "Use --jobs to control parallelism",
      "Filter by language with --languages",
      "Set --max-files for large codebases",
      "Use --no-pattern-detection if not needed"
    ],
    "debugging": [
      "Use -v, -vv, -vvv for increasing verbosity",
      "Enable --debug-call-graph for call graph issues",
      "Use --trace-functions to track specific functions",
      "Check --cache-stats for cache performance",
      "Use --validate-call-graph for correctness",
      "Enable --show-pattern-warnings for pattern detection"
    ]
  },
  "common_patterns": [
    {
      "name": "Basic Analysis",
      "command": "debtmap analyze . --format terminal",
      "use_case": "Quick code quality check"
    },
    {
      "name": "Coverage-Aware Analysis",
      "command": "debtmap analyze . --coverage-file coverage.info --top 20",
      "use_case": "Identify untested complex code"
    },
    {
      "name": "CI/CD Quality Gate",
      "command": "debtmap validate . --max-debt-density 0.05 --format json",
      "use_case": "Automated quality enforcement"
    },
    {
      "name": "Refactoring Validation",
      "command": "debtmap compare --before before.json --after after.json --target src/module.rs:123",
      "use_case": "Verify refactoring improvements"
    },
    {
      "name": "Deep Analysis",
      "command": "debtmap analyze . --multi-pass --enable-context --show-attribution",
      "use_case": "Comprehensive codebase assessment"
    },
    {
      "name": "God Object Detection",
      "command": "debtmap analyze . --no-god-object=false --aggregate-only",
      "use_case": "Find architectural issues"
    }
  ],
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "Slow analysis performance",
        "solutions": [
          "Enable caching with default settings",
          "Reduce parallelism with --jobs",
          "Disable pattern detection with --no-pattern-detection",
          "Set --max-files to limit scope",
          "Use --no-aggregation if not needed"
        ]
      },
      {
        "issue": "Inaccurate complexity scores",
        "solutions": [
          "Check language support for file type",
          "Enable semantic analysis (default)",
          "Use --multi-pass for deeper analysis",
          "Verify coverage file format (LCOV)",
          "Check threshold preset (--threshold-preset)"
        ]
      },
      {
        "issue": "High false positive rate",
        "solutions": [
          "Enable context-aware analysis (default)",
          "Adjust pattern threshold (--pattern-threshold)",
          "Use threshold presets (lenient for legacy code)",
          "Configure exclusions in config file",
          "Disable specific pattern detection"
        ]
      },
      {
        "issue": "Cache problems",
        "solutions": [
          "Clear cache with --clear-cache",
          "Check cache location with --cache-stats",
          "Migrate cache with --migrate-cache",
          "Disable cache temporarily with --no-cache",
          "Set custom location with --cache-location"
        ]
      },
      {
        "issue": "Missing or incorrect call graph",
        "solutions": [
          "Enable validation with --validate-call-graph",
          "Use --debug-call-graph for diagnostics",
          "Trace specific functions with --trace-functions",
          "Check parallel processing (try --no-parallel)",
          "Verify language support for constructs"
        ]
      }
    ]
  },
  "version_info": {
    "analyzed_from": "Source code analysis",
    "analysis_date": "2025-01-30",
    "project": "Debtmap",
    "configuration_source": ".prodigy/book-config.json"
  }
}
