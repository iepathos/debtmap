{
  "cli_commands": {
    "analyze": {
      "description": "Analyze code for complexity and technical debt",
      "primary_options": {
        "path": "Directory or file path to analyze",
        "format": "Output format (terminal, json, markdown)",
        "output": "Write results to file instead of stdout"
      },
      "threshold_options": {
        "threshold_complexity": "Cyclomatic complexity threshold (default: 10)",
        "threshold_duplication": "Duplication threshold in lines (default: 50)",
        "threshold_preset": "Preset thresholds (strict, balanced, lenient)",
        "min_priority": "Minimum priority to display (low, medium, high, critical)",
        "filter_categories": "Filter by debt categories"
      },
      "analysis_control": {
        "languages": "Specify languages to analyze (rust, python, javascript, typescript)",
        "semantic_off": "Disable semantic analysis (fallback mode)",
        "multi_pass": "Enable multi-pass analysis with attribution",
        "show_attribution": "Show complexity attribution details"
      },
      "coverage_integration": {
        "coverage_file": "LCOV coverage file for risk analysis",
        "description": "Coverage dampens debt scores for well-tested code (multiplier = 1.0 - coverage)"
      },
      "context_awareness": {
        "enable_context": "Enable context-aware risk analysis",
        "context_providers": "Providers to use (critical_path, dependency, git_history)",
        "disable_context": "Disable specific context providers",
        "no_context_aware": "Disable context-aware false positive reduction"
      },
      "output_filtering": {
        "top": "Show only top N priority items",
        "tail": "Show only bottom N priority items",
        "summary": "Use compact summary format",
        "group_by_category": "Group output by debt category"
      },
      "performance_options": {
        "no_parallel": "Disable parallel processing",
        "jobs": "Number of threads for parallel processing (0 = use all cores)",
        "max_files": "Maximum number of files to analyze"
      },
      "caching": {
        "use_cache": "Enable caching (default: enabled)",
        "no_cache": "Disable caching for this run",
        "clear_cache": "Clear cache before running",
        "force_cache_rebuild": "Force cache rebuild",
        "cache_stats": "Show cache statistics and location",
        "migrate_cache": "Migrate cache from local to shared location",
        "cache_location": "Cache location strategy (local, shared, or path)"
      },
      "pattern_detection": {
        "no_pattern_detection": "Disable pattern recognition",
        "patterns": "Enable specific patterns only (observer, singleton, factory, etc.)",
        "pattern_threshold": "Pattern confidence threshold (0.0-1.0)",
        "show_pattern_warnings": "Show warnings for uncertain detections"
      },
      "advanced_features": {
        "aggregate_only": "Show only aggregated file-level scores",
        "no_aggregation": "Disable file-level aggregation",
        "aggregation_method": "Aggregation method (sum, weighted_sum, logarithmic_sum, max_plus_average)",
        "min_problematic": "Minimum problematic functions for file aggregation",
        "no_god_object": "Disable god object detection",
        "validate_loc": "Validate LOC consistency",
        "no_public_api_detection": "Disable public API detection",
        "public_api_threshold": "Public API confidence threshold (0.0-1.0)"
      },
      "debugging": {
        "verbosity": "Increase verbosity (-v, -vv, -vvv)",
        "verbose_macro_warnings": "Show verbose macro parsing warnings",
        "show_macro_stats": "Show macro expansion statistics",
        "detail_level": "Detail level (summary, standard, comprehensive, debug)",
        "plain": "ASCII-only, no colors, no emoji, machine-parseable"
      }
    },
    "validate": {
      "description": "Validate code against configured thresholds",
      "purpose": "CI/CD integration for quality gates",
      "options": {
        "path": "Path to analyze",
        "config": "Configuration file path",
        "coverage_file": "LCOV coverage file",
        "max_debt_density": "Maximum debt density allowed (per 1000 LOC)",
        "format": "Output format",
        "output": "Output file path"
      },
      "use_cases": [
        "Pre-commit quality checks",
        "CI/CD pipeline validation",
        "Enforce coding standards",
        "Block commits exceeding thresholds"
      ]
    },
    "compare": {
      "description": "Compare two analysis results and generate diff",
      "purpose": "Track improvements and detect regressions",
      "options": {
        "before": "Path to before analysis JSON",
        "after": "Path to after analysis JSON",
        "plan": "Implementation plan to extract target location",
        "target_location": "Specific target (file:function:line)",
        "format": "Output format",
        "output": "Output file path"
      },
      "capabilities": {
        "target_tracking": "Track specific function improvements",
        "regression_detection": "Identify new critical items",
        "project_health": "Overall debt trend analysis",
        "improvement_metrics": "Score reduction, complexity reduction, coverage improvement"
      },
      "use_cases": [
        "Validate refactoring improvements",
        "Track technical debt reduction",
        "Identify regressions in PRs",
        "Measure code quality over time"
      ]
    },
    "init": {
      "description": "Initialize configuration file",
      "purpose": "Create .debtmap.toml with defaults",
      "options": {
        "force": "Overwrite existing configuration"
      }
    }
  },
  "language_support": {
    "rust": {
      "parser": "syn (native Rust AST parser)",
      "capabilities": [
        "Full AST parsing",
        "Trait resolution and implementation tracking",
        "Type inference for method calls",
        "Macro expansion handling",
        "Async/await pattern detection",
        "Error handling analysis (Result, panic)",
        "Test module detection (#[cfg(test)])",
        "Call graph extraction",
        "Purity detection"
      ],
      "complexity_metrics": [
        "Cyclomatic complexity with pattern adjustments",
        "Cognitive complexity with semantic normalization",
        "Nesting depth calculation",
        "Function length"
      ],
      "debt_detection": [
        "Panic patterns (unwrap, expect)",
        "Error swallowing",
        "Error propagation issues",
        "Long methods",
        "Deep nesting",
        "God objects",
        "Circular dependencies"
      ]
    },
    "python": {
      "parser": "rustpython_parser",
      "capabilities": [
        "Full AST parsing",
        "Dynamic import tracking",
        "Decorator analysis",
        "Async/await and asyncio patterns",
        "Exception flow analysis",
        "Static error detection (undefined variables)",
        "Dead code detection",
        "Class organization analysis",
        "Resource management patterns",
        "Test quality metrics"
      ],
      "complexity_metrics": [
        "Cyclomatic complexity",
        "Cognitive complexity",
        "Entropy-based complexity",
        "Pattern-specific adjustments"
      ],
      "debt_detection": [
        "Bare except clauses",
        "Silent exception handling",
        "Missing type hints",
        "Resource leaks (unclosed files)",
        "God objects",
        "Feature envy",
        "Dead code",
        "Test anti-patterns"
      ]
    },
    "javascript": {
      "parser": "tree-sitter (tree-sitter-javascript)",
      "capabilities": [
        "Function extraction and complexity",
        "Dependency analysis",
        "Pattern detection via tree-sitter queries",
        "TODO/FIXME detection",
        "Code smell detection",
        "Suppression comment support"
      ],
      "complexity_metrics": [
        "Cyclomatic complexity",
        "Cognitive complexity",
        "Function length"
      ],
      "debt_detection": [
        "Code smells",
        "Long methods",
        "Deep nesting",
        "TODOs and FIXMEs"
      ]
    },
    "typescript": {
      "parser": "tree-sitter (tree-sitter-typescript)",
      "capabilities": [
        "Type-aware analysis",
        "Function extraction and complexity",
        "Dependency analysis",
        "Pattern detection",
        "Code smell detection"
      ],
      "complexity_metrics": [
        "Cyclomatic complexity",
        "Cognitive complexity",
        "Function length"
      ],
      "debt_detection": [
        "Code smells",
        "Long methods",
        "Deep nesting",
        "TODOs and FIXMEs"
      ]
    }
  },
  "complexity_metrics": {
    "cyclomatic_complexity": {
      "description": "Counts decision points in code",
      "formula": "Base complexity = 1 + decision point count",
      "decision_points": [
        "if statements",
        "while loops",
        "for loops",
        "match expressions",
        "try/catch blocks",
        "Logical operators (&&, ||)"
      ],
      "adjustments": {
        "match_expressions": "Logarithmic scaling for dispatch tables",
        "pattern_based": "Reduced score for recognized patterns"
      },
      "thresholds": {
        "strict": 5,
        "balanced": 10,
        "lenient": 15
      }
    },
    "cognitive_complexity": {
      "description": "Measures mental effort to understand code",
      "calculation_modes": {
        "legacy": "Simple nesting-based calculation",
        "normalized": "Semantic normalization-based approach"
      },
      "factors": [
        "Nesting level penalties (exponential)",
        "Pattern-based adjustments (boilerplate code)",
        "Recursive match detection"
      ],
      "thresholds": {
        "strict": 7,
        "balanced": 15,
        "lenient": 25
      }
    },
    "nesting_depth": {
      "description": "Maximum nesting level in a function",
      "calculation": "Starts at 0 (top-level), increments for each block level",
      "threshold": 4
    },
    "function_length": {
      "description": "Lines of code in a function",
      "threshold": 50,
      "use_case": "Detect long methods"
    },
    "entropy_based_complexity": {
      "description": "Token entropy and pattern repetition analysis",
      "components": {
        "token_entropy": "Measure of code uniqueness",
        "pattern_repetition": "Detection of boilerplate (0.0-1.0)",
        "branch_similarity": "Comparing conditional branches",
        "dampening_factor": "Reduction for recognized patterns"
      },
      "purpose": "Identify boilerplate code (high repetition = lower effective complexity)"
    }
  },
  "technical_debt_categories": {
    "categories": {
      "TODO": {
        "weight": 1,
        "description": "Tagged comments requiring attention",
        "severity": "Info"
      },
      "FIXME": {
        "weight": 2,
        "description": "Broken functionality requiring fixes",
        "severity": "Warning"
      },
      "CodeSmell": {
        "weight": 3,
        "description": "Refactoring candidates",
        "severity": "Warning"
      },
      "Duplication": {
        "weight": 4,
        "description": "Duplicate code blocks",
        "severity": "Major"
      },
      "Complexity": {
        "weight": 5,
        "description": "High complexity functions",
        "severity": "Major"
      },
      "Dependency": {
        "weight": 3,
        "description": "Coupling issues",
        "severity": "Warning"
      },
      "ErrorSwallowing": {
        "weight": 4,
        "description": "Silenced exceptions",
        "severity": "Major"
      },
      "ResourceManagement": {
        "weight": 4,
        "description": "File/connection leaks",
        "severity": "Major"
      },
      "CodeOrganization": {
        "weight": 3,
        "description": "Structural issues",
        "severity": "Warning"
      },
      "TestComplexity": {
        "weight": 2,
        "description": "Complex test functions",
        "severity": "Warning"
      },
      "TestTodo": {
        "weight": 1,
        "description": "TODO in tests",
        "severity": "Info"
      },
      "TestDuplication": {
        "weight": 2,
        "description": "Duplicate test code",
        "severity": "Warning"
      },
      "TestQuality": {
        "weight": 3,
        "description": "Test anti-patterns",
        "severity": "Warning"
      }
    },
    "code_smells": {
      "long_parameter_list": {
        "threshold": 5,
        "recommendation": "Use struct to group parameters"
      },
      "large_class": {
        "threshold": 300,
        "recommendation": "Split into smaller modules"
      },
      "long_method": {
        "threshold": 50,
        "recommendation": "Extract smaller functions"
      },
      "deep_nesting": {
        "threshold": 4,
        "recommendation": "Use early returns or extract functions"
      }
    },
    "error_handling_issues": {
      "error_swallowing": "try/except blocks that silently catch exceptions",
      "error_propagation": "Missing error context in result chains",
      "error_context": "Lack of meaningful error messages",
      "async_errors": "Unhandled promise rejections, missing await",
      "panic_patterns": "Unwrap calls, panic macros in production code"
    },
    "organization_antipatterns": {
      "god_objects": {
        "description": "Classes with too many methods/responsibilities",
        "rust_thresholds": {
          "max_methods": 20,
          "max_fields": 15,
          "max_traits": 5,
          "max_lines": 1000,
          "max_complexity": 200
        },
        "python_thresholds": {
          "max_methods": 15,
          "max_fields": 10,
          "max_traits": 3,
          "max_lines": 500,
          "max_complexity": 150
        },
        "javascript_thresholds": {
          "max_methods": 15,
          "max_fields": 20,
          "max_traits": 3,
          "max_lines": 500,
          "max_complexity": 150
        }
      },
      "feature_envy": "Functions using other objects' data extensively",
      "circular_dependencies": "Module import cycles",
      "high_coupling": "Excessive dependencies between modules"
    },
    "testing_antipatterns": {
      "tests_without_assertions": "Tests that don't verify anything",
      "overly_complex_tests": "Tests with high cognitive complexity",
      "flaky_test_patterns": [
        "Timing dependencies",
        "Random value usage",
        "External dependency reliance",
        "Filesystem dependency",
        "Network dependency",
        "Threading issues"
      ]
    },
    "suppression": {
      "syntax": "debtmap: ignore",
      "scope": "Line-level or block-level suppression",
      "tracking": "Unclosed suppression blocks detected"
    }
  },
  "risk_assessment": {
    "scoring_methodology": {
      "formula": "final_risk = base_risk × debt_factor × complexity_factor × coverage_penalty × coverage_factor",
      "components": {
        "base_risk": {
          "formula": "Complexity Score × Coverage Impact",
          "cyclomatic_weight": 0.3,
          "cognitive_weight": 0.45,
          "function_importance": "Based on role classification"
        },
        "coverage_penalty": {
          "untested_code": "2.0x multiplier",
          "well_tested": "Reduced multiplier",
          "configurable": "By function role"
        },
        "debt_factor": {
          "description": "Additional risk from technical debt items",
          "above_threshold": "1.5x multiplier"
        },
        "pattern_adjustment": {
          "description": "Recognized patterns reduce risk",
          "magnitude": "Based on pattern confidence"
        }
      }
    },
    "risk_categories": {
      "Critical": {
        "criteria": "High complexity (>15) with low coverage (<30%)",
        "priority": "Address immediately"
      },
      "High": {
        "criteria": "High complexity (>10) with moderate coverage (<60%)",
        "priority": "Address soon"
      },
      "Medium": {
        "criteria": "Moderate complexity (>5) with low coverage (<50%)",
        "priority": "Consider addressing"
      },
      "Low": {
        "criteria": "Low complexity or high coverage",
        "priority": "Monitor"
      },
      "WellTested": {
        "criteria": "High complexity with high coverage",
        "priority": "Positive example"
      }
    },
    "test_effort_estimation": {
      "Trivial": "Cognitive complexity < 5",
      "Simple": "Cognitive complexity 5-10",
      "Moderate": "Cognitive complexity 10-20",
      "Complex": "Cognitive complexity 20-40",
      "VeryComplex": "Cognitive complexity > 40"
    },
    "prioritization_factors": {
      "complexity": "Cyclomatic and cognitive complexity",
      "coverage": "Test coverage percentage",
      "dependencies": "Number of functions that depend on this",
      "roi": "Return on investment for addressing",
      "impact_radius": "How many functions would benefit",
      "architectural_position": "Entry point vs internal function"
    },
    "scoring_weights": {
      "coverage": 0.5,
      "complexity": 0.35,
      "dependency": 0.15
    }
  },
  "output_formats": {
    "terminal": {
      "description": "Colored console output for interactive use",
      "features": [
        "Colored output with severity highlighting",
        "Summary statistics",
        "Complexity hotspots",
        "Technical debt breakdown",
        "Pass/fail status",
        "Risk distribution visualization"
      ],
      "use_cases": [
        "Local development",
        "Quick checks",
        "Interactive exploration"
      ]
    },
    "json": {
      "description": "Structured data format for tool integration",
      "formats": {
        "legacy": "Current format with {File: {...}} and {Function: {...}} wrappers",
        "unified": "New format with consistent structure and 'type' field"
      },
      "contents": [
        "Complete analysis results",
        "All metrics and scores",
        "Debt items with locations",
        "File and function data"
      ],
      "use_cases": [
        "CI/CD integration",
        "Custom tooling",
        "Data analysis",
        "Trend tracking"
      ]
    },
    "markdown": {
      "description": "Human-readable reports for documentation",
      "variants": {
        "enhanced": {
          "modules": [
            "Executive summary",
            "Complexity analysis",
            "Risk breakdown",
            "Recommendations",
            "Test quality report",
            "Visualization data",
            "Statistics and health metrics"
          ]
        },
        "standard": {
          "sections": [
            "Basic report format",
            "Function-by-function breakdown",
            "File organization",
            "Dead code detection",
            "Testing analysis"
          ]
        }
      },
      "use_cases": [
        "Pull request comments",
        "Documentation",
        "Stakeholder reports",
        "Architecture reviews"
      ]
    }
  },
  "configuration": {
    "file_format": ".debtmap.toml",
    "sections": {
      "scoring": {
        "coverage": "Weight for coverage in risk scoring (default: 0.50)",
        "complexity": "Weight for complexity (default: 0.35)",
        "dependency": "Weight for dependencies (default: 0.15)"
      },
      "role_multipliers": {
        "description": "Semantic classification adjustments",
        "pure_logic": "1.2 (prioritized)",
        "orchestrator": "0.8 (delegators)",
        "io_wrapper": "0.7 (I/O boundaries)",
        "entry_point": "0.9 (entry functions)",
        "pattern_match": "0.6 (boilerplate)",
        "unknown": "1.0 (default)"
      },
      "thresholds": {
        "cyclomatic": "Cyclomatic complexity threshold (default: 10)",
        "cognitive": "Cognitive complexity threshold (default: 15)",
        "presets": "strict, balanced, lenient"
      },
      "display": {
        "tiered_display": "Enable tiered priority display (default: true)",
        "items_per_tier": "Items to show per tier (default: 5)"
      },
      "god_object_detection": {
        "enabled": "Enable god object detection (default: true)",
        "language_specific": "Thresholds per language (rust, python, javascript)"
      },
      "entropy": {
        "token_entropy_calculation": "Parameters for entropy metrics",
        "pattern_repetition_thresholds": "Boilerplate detection thresholds",
        "dampening_factors": "Score reduction for recognized patterns"
      },
      "error_handling": {
        "patterns": "Error patterns to detect",
        "severity_levels": "Severity for different error types",
        "context_requirements": "Required error context"
      },
      "orchestrator_detection": {
        "max_cyclomatic": "Max complexity for orchestrators (default: 5)",
        "min_delegation_ratio": "Minimum delegation ratio (default: 0.2)",
        "min_meaningful_callees": "Minimum callees (default: 2)",
        "cognitive_weight": "Weight for cognitive complexity (default: 0.7)"
      },
      "output": {
        "default_format": "terminal, json, or markdown",
        "file_output_paths": "Default output file paths",
        "report_naming": "Report naming conventions"
      },
      "ignore": {
        "glob_patterns": "Patterns to exclude from analysis",
        "file_type_exclusions": "File types to skip"
      },
      "normalization": {
        "linear_threshold": "Threshold for linear scaling (default: 10.0)",
        "logarithmic_threshold": "Threshold for log scaling (default: 100.0)",
        "score_transformation": "Score transformation settings"
      }
    }
  },
  "advanced_capabilities": {
    "call_graph_analysis": {
      "description": "Builds function dependency graph",
      "features": [
        "Identifies entry points and public APIs",
        "Calculates impact radius",
        "Supports cross-module analysis (Rust)",
        "Detects circular dependencies"
      ],
      "use_cases": [
        "Impact analysis for changes",
        "Identify critical functions",
        "Refactoring planning",
        "Architecture visualization"
      ]
    },
    "coverage_integration": {
      "format": "LCOV",
      "features": [
        "Line-by-line coverage matching",
        "Coverage-aware risk scoring",
        "Coverage gap identification",
        "Dampening for well-tested code"
      ],
      "use_cases": [
        "Prioritize untested complex code",
        "Validate test coverage",
        "Risk-based testing strategy"
      ]
    },
    "test_analysis": {
      "detection": [
        "Test module identification",
        "Assertion detection",
        "Test complexity measurement"
      ],
      "quality_checks": [
        "Flaky test patterns",
        "Missing assertions",
        "Overly complex tests",
        "Test anti-patterns"
      ],
      "use_cases": [
        "Improve test suite quality",
        "Identify flaky tests",
        "Test refactoring priorities"
      ]
    },
    "pattern_detection": {
      "supported_patterns": [
        "Observer pattern",
        "Singleton pattern",
        "Factory pattern",
        "Strategy pattern",
        "Callback pattern",
        "Template method pattern",
        "Builder pattern",
        "Visitor pattern",
        "Dependency injection"
      ],
      "configuration": {
        "confidence_threshold": "0.0-1.0 (default: 0.7)",
        "selective_detection": "Enable specific patterns only",
        "warnings": "Show uncertain detections"
      },
      "use_cases": [
        "Architecture documentation",
        "Pattern consistency checks",
        "False positive reduction"
      ]
    },
    "multi_pass_analysis": {
      "description": "Enhanced analysis with attribution tracking",
      "passes": [
        "Initial complexity calculation",
        "Pattern detection and normalization",
        "Attribution to source patterns",
        "Risk recalculation with context"
      ],
      "benefits": [
        "More accurate complexity scores",
        "Better false positive handling",
        "Detailed attribution information"
      ]
    },
    "semantic_classification": {
      "roles": {
        "PureLogic": "Pure computation functions (prioritized)",
        "Orchestrator": "Coordination functions (lower priority)",
        "IOWrapper": "I/O boundary functions (lower priority)",
        "EntryPoint": "Public API entry points",
        "PatternMatch": "Boilerplate pattern implementations",
        "Unknown": "Unclassified functions"
      },
      "impact": "Adjusts risk scores based on function role"
    },
    "context_aware_analysis": {
      "providers": {
        "critical_path": "Identifies functions on critical execution paths",
        "dependency": "Analyzes function dependency relationships",
        "git_history": "Incorporates change history data"
      },
      "benefits": [
        "Reduced false positives",
        "Better prioritization",
        "Historical context"
      ]
    }
  },
  "integration_features": {
    "ci_cd_integration": {
      "validate_command": "Fail builds exceeding thresholds",
      "json_output": "Machine-readable results",
      "exit_codes": "Standard exit codes for automation",
      "examples": [
        "Pre-commit hooks",
        "Pull request checks",
        "Nightly quality reports"
      ]
    },
    "comparison_workflow": {
      "description": "Track changes between analyses",
      "inputs": [
        "Before analysis JSON",
        "After analysis JSON",
        "Implementation plan (optional)",
        "Target location (optional)"
      ],
      "outputs": {
        "target_status": "Resolved, Improved, Unchanged, Regressed, NotFound",
        "metrics_delta": "Score changes, complexity changes, coverage changes",
        "regression_detection": "New critical items",
        "project_health": "Overall debt trend"
      },
      "use_cases": [
        "Validate refactoring effectiveness",
        "Track technical debt reduction",
        "Identify regressions in code reviews",
        "Measure code quality over time"
      ]
    },
    "caching_system": {
      "strategies": {
        "local": "Per-project cache directory",
        "shared": "User-level shared cache",
        "custom": "Specify cache directory path"
      },
      "features": [
        "Automatic cache invalidation",
        "Cache statistics",
        "Cache migration tools",
        "Manual cache control"
      ],
      "benefits": [
        "Faster incremental analysis",
        "Reduced resource usage",
        "Consistent results"
      ]
    }
  },
  "best_practices": {
    "analysis_workflow": [
      "Start with default settings to establish baseline",
      "Use coverage integration for risk-based prioritization",
      "Enable context-aware analysis for large projects",
      "Use compare command to validate improvements",
      "Configure thresholds based on project standards"
    ],
    "threshold_selection": {
      "strict": "For new projects or high-quality standards",
      "balanced": "For typical projects (default recommendation)",
      "lenient": "For legacy projects or complex domains"
    },
    "output_format_selection": {
      "terminal": "Local development and quick checks",
      "json": "CI/CD integration and automation",
      "markdown": "Documentation and reports"
    },
    "performance_optimization": [
      "Use caching for repeated analysis",
      "Enable parallel processing (default)",
      "Use --max-files for large codebases",
      "Filter by language if analyzing mixed projects"
    ],
    "false_positive_reduction": [
      "Enable context-aware analysis (--context)",
      "Use pattern detection to recognize boilerplate",
      "Configure role multipliers for project patterns",
      "Use suppression comments for intentional patterns"
    ]
  },
  "common_patterns": [
    {
      "name": "CI Quality Gate",
      "description": "Fail builds exceeding debt thresholds",
      "command": "debtmap validate . --config .debtmap.toml --max-debt-density 50",
      "use_case": "Prevent technical debt accumulation"
    },
    {
      "name": "Coverage-Driven Prioritization",
      "description": "Identify untested complex code",
      "command": "debtmap analyze . --coverage-file coverage.lcov --format json --output analysis.json",
      "use_case": "Focus testing efforts on high-risk areas"
    },
    {
      "name": "Refactoring Validation",
      "description": "Verify improvements after refactoring",
      "command": "debtmap compare --before before.json --after after.json --target-location src/module.rs:process:42",
      "use_case": "Confirm refactoring effectiveness"
    },
    {
      "name": "Architecture Review",
      "description": "Generate comprehensive markdown report",
      "command": "debtmap analyze . --format markdown --output report.md --context --show-attribution",
      "use_case": "Stakeholder reports and documentation"
    },
    {
      "name": "Quick Local Check",
      "description": "Fast terminal output for development",
      "command": "debtmap analyze . --top 10 --summary",
      "use_case": "Local development workflow"
    }
  ],
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "High false positive rate",
        "solutions": [
          "Enable context-aware analysis (--context)",
          "Use pattern detection (--patterns)",
          "Adjust role multipliers in config",
          "Use suppression comments for intentional patterns"
        ]
      },
      {
        "issue": "Slow analysis on large codebase",
        "solutions": [
          "Enable caching (default)",
          "Use parallel processing (default)",
          "Increase thread count (--jobs)",
          "Limit files analyzed (--max-files)",
          "Filter by specific languages (--languages)"
        ]
      },
      {
        "issue": "Coverage data not matching",
        "solutions": [
          "Verify LCOV file format",
          "Check path normalization",
          "Use --validate-loc to diagnose",
          "Ensure LCOV covers analyzed files"
        ]
      },
      {
        "issue": "Thresholds too strict/lenient",
        "solutions": [
          "Use threshold presets (--threshold-preset)",
          "Customize .debtmap.toml thresholds",
          "Analyze baseline first, then adjust",
          "Consider project domain (strict for new, lenient for legacy)"
        ]
      },
      {
        "issue": "Cache taking too much space",
        "solutions": [
          "Check cache stats (--cache-stats)",
          "Clear cache (--clear-cache)",
          "Migrate to shared cache (--migrate-cache)",
          "Set custom cache location (--cache-location)"
        ]
      }
    ],
    "debugging": [
      {
        "symptom": "Unexpected complexity scores",
        "debug_flags": ["-v", "-vv", "-vvv", "--show-attribution"]
      },
      {
        "symptom": "Pattern detection issues",
        "debug_flags": ["--show-pattern-warnings", "--pattern-threshold 0.5"]
      },
      {
        "symptom": "Macro expansion problems",
        "debug_flags": ["--verbose-macro-warnings", "--show-macro-stats"]
      },
      {
        "symptom": "Performance issues",
        "debug_flags": ["--detail-level debug", "--cache-stats"]
      }
    ]
  },
  "version_info": {
    "analyzed_version": "0.2.8",
    "analysis_date": "2025-10-20",
    "analysis_method": "Comprehensive codebase exploration",
    "configuration_source": ".prodigy/book-config.json"
  },
  "metadata": {
    "total_feature_areas": 11,
    "language_support_count": 4,
    "complexity_metrics_count": 5,
    "debt_categories_count": 13,
    "output_formats_count": 3,
    "cli_commands_count": 4,
    "pattern_detection_count": 9,
    "analysis_approach": "Multi-pass with attribution and context awareness"
  }
}
