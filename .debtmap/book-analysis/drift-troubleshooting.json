{
  "chapter_id": "troubleshooting",
  "chapter_title": "Troubleshooting",
  "chapter_file": "book/src/troubleshooting.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Comprehensive troubleshooting guide with excellent coverage of common issues. Minor technical inaccuracies in scoring formulas and some missing advanced configuration details need updates. Overall very strong content that serves users well.",
  "issues": [
    {
      "type": "incorrect_explanation",
      "severity": "medium",
      "section": "FAQ - How does coverage affect scores? (Lines 1440-1453)",
      "description": "Oversimplified explanation of coverage dampening formula that doesn't match the actual unified scoring implementation",
      "current_content": "Formula: `score_multiplier = 1.0 - coverage`\n0% coverage → full score (highest priority)\n100% coverage → score multiplied by 0 (lowest priority)\nUntested complex code rises to the top",
      "should_be": "Coverage Factor Formula: (1 - coverage_percentage) × 2 + 1\nThis factor is weighted at 40% in the unified scoring formula:\nBase Score = (Complexity × 0.40) + (Coverage × 0.40) + (Dependency × 0.20)\nFinal Score = Base Score × Role Multiplier",
      "fix_suggestion": "Update FAQ to explain the actual coverage factor calculation and how it integrates into the multi-factor unified scoring system. Consider linking to a scoring explanation chapter for full details.",
      "source_reference": "features.json:349-402 (unified_scoring), specifically lines 359-365 (coverage_factor)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Cache Troubleshooting - Cache Configuration (Lines 428-442)",
      "description": "Missing comprehensive cache pruning configuration and strategies documentation",
      "should_add": "Document environment variables:\n- DEBTMAP_CACHE_AUTO_PRUNE (default: true)\n- DEBTMAP_CACHE_MAX_SIZE (default: 1GB)\n- DEBTMAP_CACHE_MAX_AGE_DAYS (default: 30)\n- DEBTMAP_CACHE_MAX_ENTRIES (default: 10000)\n- DEBTMAP_CACHE_PRUNE_PERCENTAGE (default: 0.25)\n- DEBTMAP_CACHE_STRATEGY (lru, lfu, fifo, age_based; default: lru)",
      "fix_suggestion": "Add new subsection 'Cache Pruning Configuration' explaining:\n1. Automatic cache management and pruning triggers\n2. Size and age limits with examples\n3. Pruning strategies and when to use each (LRU for general use, LFU for stable workloads, FIFO for testing, age-based for compliance)\n4. How to configure via environment variables\n5. Performance implications of different strategies",
      "source_reference": "features.json:611-629 (cache_management.configuration and pruning_strategies)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Advanced Analysis Troubleshooting (Lines 610-768)",
      "description": "No troubleshooting guidance for tiered prioritization system",
      "should_add": "Add section explaining:\n- How the 4-tier system classifies items (T1: Critical Architecture, T2: Complex Untested, T3: Testing Gaps, T4: Maintenance)\n- Tier weights applied to scores (T1: 1.5x, T2: 1.0x, T3: 0.7x, T4: 0.3x)\n- Configuration of tier thresholds in .debtmap.toml\n- Common question: 'Why is my item in Tier 3 instead of Tier 2?'\n- show_t4_in_main_report configuration option",
      "fix_suggestion": "Add subsection 'Tiered Prioritization Issues' covering:\n1. Overview of tier classification logic\n2. Tier weights and their impact on final scores\n3. Configuring tier thresholds (t2_complexity_threshold, t2_dependency_threshold, t3_complexity_threshold)\n4. Troubleshooting unexpected tier assignments\n5. Toggling Tier 4 visibility with show_t4_in_main_report",
      "source_reference": "features.json:522-560 (tiered_prioritization) and features.json:513-519 (configuration.tiers)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Common Issues - False positives for validation functions (Line 721)",
      "description": "Mentions entropy analysis but doesn't explain how to configure it properly",
      "current_content": "Enable entropy analysis in .debtmap.toml to reduce false positives by up to 70%",
      "should_be": "Enable and configure entropy analysis in .debtmap.toml:\n\n[entropy]\nenabled = true\nweight = 0.3              # Weight in complexity adjustment (0.0-1.0)\nmin_tokens = 50           # Minimum tokens for entropy calculation\npattern_threshold = 0.7   # Pattern similarity threshold\nuse_classification = true # Enable advanced token classification\nentropy_threshold = 0.5   # Entropy level for dampening\nbranch_threshold = 0.8    # Branch similarity threshold\nmax_combined_reduction = 0.5  # Max reduction percentage",
      "fix_suggestion": "Expand the brief mention into a concrete configuration example with explanations of key parameters. Add note about when to adjust each parameter (e.g., increase pattern_threshold to be more strict, decrease entropy_threshold to apply dampening more broadly).",
      "source_reference": "features.json:473-482 (configuration.entropy)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "JSON Format Issues (Lines 174-191)",
      "description": "Mentions legacy vs unified format but doesn't explain the structural differences",
      "current_content": "# Use unified JSON format (consistent structure)\ndebtmap --format json --output-format unified\n\n# Legacy format (default, uses {File: {...}} structure)\ndebtmap --format json --output-format legacy",
      "should_be": "Legacy format wraps items in variant-specific objects:\n{\"File\": {...}}, {\"Function\": {...}}\n\nUnified format uses consistent structure with 'type' field:\n{\"type\": \"File\", ...}, {\"type\": \"Function\", ...}\n\nThe unified format is recommended for parsing and tool integration.",
      "fix_suggestion": "Add brief example showing the difference between formats, or reference the Configuration/Output Formats chapter for detailed JSON structure explanation. Help users understand when to use each format.",
      "source_reference": "features.json:438-447 (output_formats.json)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced Analysis Troubleshooting (Lines 610-768)",
      "description": "Missing troubleshooting for file-level scoring and aggregation",
      "should_add": "Add subsection 'File-Level Scoring Issues' covering:\n- When to use --aggregate-only vs --no-aggregation vs default (both)\n- How file scores are calculated (size_factor × complexity_factor × coverage_factor × density_factor × god_object_multiplier × function_scores)\n- Aggregation methods (sum, weighted_sum, logarithmic_sum, max_plus_average) and when to use each\n- Troubleshooting: 'Why does this file have such a high score?'\n- Understanding the density_factor (penalizes files with >50 functions)",
      "fix_suggestion": "Add detailed explanation of file-level scoring formula and aggregation methods with examples of when file scores might seem unexpectedly high or low. Help users understand the multi-factor calculation.",
      "source_reference": "features.json:562-584 (file_level_scoring)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "FAQ (Lines 1351-1580)",
      "description": "Missing FAQ explaining the unified scoring system",
      "should_add": "Q: How is the 0-10 priority score calculated?\n\nA: Debtmap uses a multi-factor unified scoring formula:\n\nBase Score = (Complexity Factor × 0.40) + (Coverage Factor × 0.40) + (Dependency Factor × 0.20)\n\nThen adjusted by role multipliers:\n- Entry points: 1.5x (critical path)\n- Business logic: 1.2x (core functionality)  \n- Data access: 1.0x (important but stable)\n- Infrastructure: 0.8x (lower priority)\n- Utilities: 0.5x (minimal priority)\n- Test code: 0.1x (lowest priority)\n\nFinal Score = Base Score × Role Multiplier\n\nThis ensures functions are prioritized by true impact, not just raw complexity.",
      "fix_suggestion": "Add comprehensive FAQ entry about unified scoring. This is likely a common question when users first see the 0-10 scores and wonder how they're calculated. Include link to detailed scoring documentation.",
      "source_reference": "features.json:349-402 (unified_scoring)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Compare Command Issues (Lines 1181-1289)",
      "description": "Missing documentation of --plan and --target-location flags for targeted comparison",
      "should_add": "### Targeted Comparison\n\nUse `--plan` and `--target-location` for focused debt analysis:\n\n```bash\n# Compare based on implementation plan\ndebtmap compare --before before.json --after after.json --plan implementation-plan.json\n\n# Compare specific code location\ndebtmap compare --before before.json --after after.json \\\n  --target-location src/main.rs:calculate_score:42\n\n# Combine both for precise tracking\ndebtmap compare --before before.json --after after.json \\\n  --plan implementation-plan.json \\\n  --target-location src/analyzers/complexity.rs:analyze_function:128\n```\n\n**Use cases**:\n- Track debt changes for planned refactoring tasks\n- Focus on specific function or code location\n- Granular technical debt tracking",
      "fix_suggestion": "Add subsection showing --plan and --target-location usage with concrete examples. These are powerful features for focused debt tracking that users may not discover otherwise.",
      "source_reference": "features.json:101-103 (compare command options)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Compare Command Issues (Lines 1186-1204)",
      "description": "Doesn't mention that compare command defaults to JSON output (unlike analyze which defaults to terminal)",
      "should_add": "**Note**: The `compare` command defaults to JSON output format (unlike `analyze` which defaults to terminal). Use `--format terminal` or `--format markdown` if you need different output.\n\nExample:\n```bash\n# Compare with terminal output\ndebtmap compare --before before.json --after after.json --format terminal\n```",
      "fix_suggestion": "Add note in 'Basic Usage' section explaining the default output format difference between analyze and compare commands. This prevents confusion when users expect terminal output but get JSON.",
      "source_reference": "features.json:103-104 (compare format defaults to different from analyze)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Validate Command Issues (Lines 1290-1350)",
      "description": "Missing detailed documentation of --max-debt-density flag",
      "should_add": "### Debt Density Validation\n\n**Flag**: `--max-debt-density <number>`\n\nSets the maximum acceptable technical debt per 1000 lines of code.\n\n```bash\n# Set maximum acceptable debt density (per 1000 LOC)\ndebtmap validate /path/to/project --max-debt-density 10.0\n\n# Stricter threshold for critical projects\ndebtmap validate /path/to/project --max-debt-density 5.0\n\n# Lenient threshold for legacy code\ndebtmap validate /path/to/project --max-debt-density 20.0\n```\n\n**Troubleshooting validation failures**:\n```bash\n# See which files exceed threshold\ndebtmap validate /path/to/project --max-debt-density 10.0 -v\n\n# Get detailed breakdown\ndebtmap validate /path/to/project --max-debt-density 10.0 -vv\n\n# Analyze specific files that failed\ndebtmap /path/to/problematic/file.rs -v\n```",
      "fix_suggestion": "Expand the Validate Command section to fully document --max-debt-density flag with examples and troubleshooting guidance. This is important for CI/CD integration.",
      "source_reference": "features.json:92 (validate.options.max_debt_density)"
    },
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Quick Fixes for Common Issues (Line 9)",
      "description": "Uses deprecated short flag -j for threads",
      "current_content": "Analysis is slow: Check `--cache-stats`, ensure caching is enabled, adjust threads with `-j`",
      "should_be": "Analysis is slow: Check `--cache-stats`, ensure caching is enabled, adjust threads with `--jobs`",
      "fix_suggestion": "Update to use long-form --jobs flag instead of -j to match current CLI conventions and avoid confusion.",
      "source_reference": "features.json:48 (performance_options.jobs)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced Analysis Troubleshooting",
      "description": "Chapter documents advanced flags but missing --detail-level, --aggregate-only, --no-aggregation",
      "should_add": "Document these flags:\n\n### Detail Level Control\n\n**Flag**: `--detail-level <level>`\n\nControls the level of detail in analysis output.\n\n```bash\n# Available detail levels:\ndebtmap --detail-level summary        # High-level overview only\ndebtmap --detail-level standard       # (default) Balanced detail\ndebtmap --detail-level comprehensive  # Detailed analysis\ndebtmap --detail-level debug         # Full debug information\n```\n\n**When to use**:\n- `summary`: Quick overview for large codebases\n- `standard`: Default, appropriate for most use cases\n- `comprehensive`: Deep dive into specific issues\n- `debug`: Troubleshooting analysis behavior\n\n### Aggregation Control\n\n**Flags**: `--aggregate-only`, `--no-aggregation`\n\nControl file-level score aggregation.\n\n```bash\n# Show only aggregated file-level scores\ndebtmap --aggregate-only\n\n# Disable file-level aggregation entirely\ndebtmap --no-aggregation\n\n# Default: show both individual items and file aggregates\ndebtmap\n```\n\n**Use cases**:\n- `--aggregate-only`: Focus on file-level technical debt\n- `--no-aggregation`: See individual functions/classes only\n- Default: Full picture with both levels",
      "fix_suggestion": "Add these subsections to Advanced Analysis Troubleshooting to document the newer flags that users may not discover.",
      "source_reference": "features.json:72-75 (detail_level, aggregate_only, no_aggregation in advanced_options)"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of common issues with clear problem/solution format",
    "Excellent organizational structure: Quick Fixes → Common Issues → Debug Mode → Performance → Advanced",
    "Practical, actionable commands for each troubleshooting scenario",
    "Well-written FAQ section addressing real user questions",
    "Thorough troubleshooting checklist at the end for systematic debugging",
    "Clear distinction between bugs and feature requests",
    "Detailed language-specific sections (Rust macros, Python types, JS/TS parsing)",
    "Comprehensive cache troubleshooting with practical strategies",
    "Context provider troubleshooting is detailed and accurate",
    "Error messages reference section provides actionable solutions for each error type",
    "Debug mode section clearly explains verbosity levels with examples",
    "Performance tips are measurable and include comparison table",
    "Compare command has dedicated troubleshooting section",
    "Good balance of beginner-friendly quick fixes and advanced topics",
    "Professional 'When to File Bug Reports' section sets proper expectations",
    "Related documentation links help users find additional information"
  ],
  "improvement_suggestions": [
    "Add visual diagrams for complex concepts (unified scoring formula, tiered prioritization flow)",
    "Include more real-world troubleshooting scenarios based on actual user issues",
    "Add 'Related Issues' cross-references between related troubleshooting sections",
    "Consider adding a 'Quick Diagnostic Tree' flowchart at the beginning to guide users to relevant sections",
    "Add timestamps for when sections were last updated to track content freshness",
    "Include links to GitHub issues for known bugs and documented workarounds",
    "Add performance benchmarks comparing different configuration options",
    "Include troubleshooting for common CI/CD integration issues (exit codes, report parsing, etc.)",
    "Add common .debtmap.toml configuration mistakes and how to fix them",
    "Include version compatibility notes (e.g., 'flag X added in v0.2.5, requires minimum version 0.2.5')",
    "Add 'Recently Changed Flags' section for users upgrading between versions"
  ],
  "metadata": {
    "analyzed_at": "2025-10-20",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [
      "Quick fixes for common issues",
      "Parse errors and fallback modes",
      "Out of memory errors",
      "Performance issues and optimization",
      "Cache corruption and troubleshooting",
      "File permission errors",
      "Git history errors",
      "Coverage file issues",
      "Threshold and preset configuration",
      "JSON format issues (legacy vs unified)",
      "Context provider troubleshooting",
      "Debug mode and verbosity levels",
      "Advanced analysis flags",
      "Error messages reference",
      "Language-specific issues (Rust, Python, JavaScript, TypeScript)",
      "Output formatting and emoji issues",
      "Compare command",
      "Validate command",
      "FAQ",
      "Bug reporting guidelines"
    ],
    "validation_focus": "Check troubleshooting covers common user issues",
    "total_issues": 12,
    "high_severity": 0,
    "medium_severity": 3,
    "low_severity": 9
  }
}
