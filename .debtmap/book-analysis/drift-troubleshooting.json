{
  "chapter_id": "troubleshooting",
  "chapter_title": "Troubleshooting",
  "chapter_file": "book/src/troubleshooting.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Extremely comprehensive troubleshooting guide with excellent coverage of common user issues. Contains some advanced features not documented in features.json that need verification. Several scoring formula explanations need reconciliation with features.json. Overall, this is a high-quality, user-focused chapter that serves as an excellent reference.",
  "issues": [
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Cache Pruning Configuration (Lines 463-498)",
      "description": "Chapter documents extensive cache pruning environment variables and strategies not mentioned in features.json",
      "current_content": "Documents cache pruning with environment variables:\n- DEBTMAP_CACHE_AUTO_PRUNE (default: true)\n- DEBTMAP_CACHE_MAX_SIZE (default: 1GB)\n- DEBTMAP_CACHE_MAX_AGE_DAYS (default: 30)\n- DEBTMAP_CACHE_MAX_ENTRIES (default: 10000)\n- DEBTMAP_CACHE_PRUNE_PERCENTAGE (default: 0.25)\n- DEBTMAP_CACHE_STRATEGY (lru, lfu, fifo, age_based)\n\nIncludes detailed explanation of each strategy and when to use them.",
      "should_verify": "Check if cache pruning is actually implemented in codebase or if this is planned/outdated documentation",
      "fix_suggestion": "Either add cache pruning features to features.json if implemented, or remove from chapter if not yet implemented. This is valuable user-facing documentation if the feature exists.",
      "source_reference": "Need to check src/cache/ or src/io/cache/ for cache pruning implementation"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Tiered Prioritization System (Lines 809-868)",
      "description": "Chapter extensively documents a 4-tier prioritization system with specific weights and configuration options not mentioned in features.json",
      "current_content": "Documents tiered prioritization:\n- Tier 1 (Critical Architecture): 1.5× multiplier\n- Tier 2 (Complex Untested): 1.0× multiplier\n- Tier 3 (Testing Gaps): 0.7× multiplier\n- Tier 4 (Maintenance): 0.3× multiplier\n\nConfiguration in [tiers] section:\n- t2_complexity_threshold = 15\n- t2_dependency_threshold = 10\n- t3_complexity_threshold = 8\n- show_t4_in_main_report = false",
      "should_verify": "Check if tier system is actually implemented in the risk assessment or scoring modules",
      "fix_suggestion": "If tiers exist, add comprehensive documentation to features.json under risk_assessment or configuration. If not implemented, remove from chapter or clearly mark as experimental/planned.",
      "source_reference": "Check src/risk/tiers.rs or src/scoring/tiers.rs for tier implementation"
    },
    {
      "type": "inconsistent_information",
      "severity": "high",
      "section": "Priority Score Calculation Formula (Lines 1648-1693)",
      "description": "Chapter FAQ provides detailed unified scoring formula that has different weights than features.json risk_assessment.scoring_methodology",
      "current_content": "Chapter FAQ states:\nBase Score = (Complexity Factor × 0.40) + (Coverage Factor × 0.40) + (Dependency Factor × 0.20)\nCoverage Factor = (1 - coverage_percentage) × 2 + 1\nFinal Score = Base Score × Role Multiplier",
      "should_be": "Features.json states:\nfinal_risk = base_risk × debt_factor × complexity_factor × coverage_penalty × coverage_factor\n\nWeights:\n- coverage: 0.5\n- complexity: 0.35\n- dependency: 0.15",
      "fix_suggestion": "Reconcile the two formulas. Verify which is actually implemented (check src/risk/scoring.rs or src/scoring/unified.rs) and update both chapter and features.json to match. This is critical for users understanding how scores are calculated.",
      "source_reference": "src/risk/scoring.rs or src/scoring/unified.rs for actual implementation; features.json lines 433-498"
    },
    {
      "type": "inconsistent_information",
      "severity": "medium",
      "section": "Coverage Impact on Scores (Lines 1697-1716)",
      "description": "Chapter FAQ explains coverage using different formula than features.json",
      "current_content": "FAQ states:\nCoverage Factor Formula: (1 - coverage_percentage) × 2 + 1\nRanges from 1.0 (100% coverage) to 3.0 (0% coverage)\nWeighted at 40% in unified scoring formula",
      "should_be": "Features.json describes coverage_penalty as:\nuntested_code: 2.0x multiplier\nwell_tested: Reduced multiplier\nConfigurable by function role",
      "fix_suggestion": "Reconcile coverage calculation between chapter and features.json. The formulas appear different and need to be aligned. Verify actual implementation and update both documents.",
      "source_reference": "features.json lines 442-447; src/risk/coverage.rs for implementation"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "File-Level Scoring Formula (Lines 869-938)",
      "description": "Chapter provides detailed file-level scoring formula with multiple factors not documented in features.json",
      "current_content": "File Score = size_factor × complexity_factor × coverage_factor × density_factor × god_object_multiplier × function_scores\n\nFactors explained:\n- size_factor: Based on lines of code\n- complexity_factor: Average complexity across functions\n- coverage_factor: From LCOV file\n- density_factor: Penalizes files with >50 functions\n- god_object_multiplier: 1.5× for god objects",
      "should_verify": "Features.json mentions file aggregation and aggregation_method options but not this specific formula",
      "fix_suggestion": "Either add detailed file scoring formula to features.json or verify if this formula is outdated. This is important for users understanding file-level scores.",
      "source_reference": "Check src/aggregation/file.rs or src/scoring/file_level.rs for implementation"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced CLI Flags",
      "description": "Chapter documents several advanced flags not explicitly listed in features.json analyze command options",
      "current_content": "Flags documented in chapter:\n- --multi-pass (line 676)\n- --attribution / --show-attribution (line 695)\n- --aggregation-method with options (line 709)\n- --min-problematic (line 728)\n- --no-god-object (line 750)\n- --detail-level (line 769)\n- --aggregate-only / --no-aggregation (line 789)",
      "should_verify": "Check if these flags actually exist in CLI implementation",
      "fix_suggestion": "If these flags exist, add them to features.json CLI documentation. If they don't exist, remove from chapter. Note: features.json does mention multi_pass and show_attribution in analysis_control, so this may just be organizational.",
      "source_reference": "src/cli/mod.rs or src/main.rs for CLI flag definitions; features.json lines 19-22"
    },
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Compare Command Default Output (Line 1399)",
      "description": "Chapter states compare command defaults to JSON output which should be verified",
      "current_content": "\"Note: The compare command defaults to JSON output format (unlike analyze which defaults to terminal).\"",
      "should_verify": "Check actual default output format for compare command in implementation",
      "fix_suggestion": "Verify and update if needed. If true, this is good information for users to know.",
      "source_reference": "src/cli/compare.rs or src/commands/compare.rs for default format"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Entropy Configuration (Lines 1218-1240)",
      "description": "Chapter documents extensive entropy configuration options that features.json only briefly mentions",
      "current_content": "Documents entropy configuration in .debtmap.toml:\n[entropy]\nenabled = true\nweight = 0.3\nmin_tokens = 50\npattern_threshold = 0.7\nuse_classification = true\nentropy_threshold = 0.5\nbranch_threshold = 0.8\nmax_combined_reduction = 0.5\n\nIncludes guidance on when to adjust each parameter.",
      "should_verify": "Features.json mentions entropy under configuration but not with this level of detail",
      "fix_suggestion": "Expand features.json entropy section to include all these configuration options, or verify if some are outdated/planned.",
      "source_reference": "src/complexity/entropy.rs or src/config/entropy.rs; features.json lines 598-602"
    },
    {
      "type": "unclear_content",
      "severity": "low",
      "section": "Coverage Factor Formula (Lines 1700-1702)",
      "description": "Coverage factor formula (1 - coverage_percentage) × 2 + 1 may be confusing without explanation",
      "current_content": "Coverage Factor Formula: (1 - coverage_percentage) × 2 + 1\nRanges from 1.0 (100% coverage) to 3.0 (0% coverage)",
      "should_clarify": "This formula is unusual and could use explanation of why this specific formula is used instead of simpler alternatives",
      "fix_suggestion": "Add brief rationale for the formula (e.g., 'This formula provides non-linear scaling to emphasize the difference between untested and partially tested code'). Or verify if this formula is correct.",
      "source_reference": "src/risk/coverage.rs for coverage calculation logic"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Compare Command - Targeted Comparison (Lines 1392-1474)",
      "description": "Chapter mentions compare command but doesn't document --plan and --target-location flags mentioned in features.json",
      "current_content": "Basic compare usage is documented but not the advanced targeting options",
      "should_add": "Document:\n--plan: Implementation plan to extract target location\n--target-location: Specific target (file:function:line)\n\nThese allow focused comparison of specific functions or planned refactorings.",
      "fix_suggestion": "Add subsection 'Targeted Comparison' with examples of using --plan and --target-location for focused debt tracking",
      "source_reference": "features.json lines 101-103"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Validate Command Documentation (Lines 1501-1561)",
      "description": "Validate command section exists but --max-debt-density flag could be documented more thoroughly",
      "current_content": "Basic validate usage shown with --max-debt-density examples",
      "should_add": "More detailed troubleshooting guidance:\n- How to see which files exceed threshold with -v\n- Interpreting debt density values\n- Setting appropriate thresholds for different project types",
      "fix_suggestion": "Expand validate section with troubleshooting subsection for validation failures",
      "source_reference": "features.json line 92"
    }
  ],
  "positive_aspects": [
    "Extremely comprehensive coverage of troubleshooting scenarios - one of the most thorough troubleshooting chapters I've seen",
    "Well-organized with clear progression from quick fixes to advanced topics",
    "Excellent use of code examples showing actual commands for every scenario",
    "FAQ section addresses real user questions with practical, actionable answers",
    "Quick Fixes section at top is very user-friendly for common issues",
    "Error Messages Reference section is extremely valuable",
    "Language-specific issues section helps users with specific parsers",
    "Performance tips are concrete and measurable with comparison table",
    "Cache troubleshooting is thorough with multiple strategies explained",
    "Context provider troubleshooting is detailed and accurate",
    "Debug mode section clearly explains verbosity levels",
    "Troubleshooting checklist at end provides systematic debugging approach",
    "Professional 'When to File Bug Reports' section sets proper expectations",
    "Compare and Validate commands have dedicated troubleshooting sections",
    "Output formatting issues section is comprehensive",
    "Related documentation links help users find more information",
    "Good balance of beginner-friendly and advanced content"
  ],
  "improvement_suggestions": [
    "Verify and reconcile scoring formulas between chapter and features.json - this is the most critical improvement",
    "Add visual diagrams for complex concepts like unified scoring formula and tiered prioritization",
    "Include more real-world troubleshooting scenarios from actual user issues",
    "Add cross-references between related troubleshooting sections",
    "Consider adding a diagnostic flowchart at the beginning to guide users",
    "Add version compatibility notes for flags (e.g., 'added in v0.2.5')",
    "Include links to GitHub issues for known bugs and documented workarounds",
    "Add troubleshooting for common CI/CD integration issues",
    "Document common .debtmap.toml configuration mistakes",
    "Add performance benchmarks comparing different configurations",
    "Include 'Recently Changed Flags' section for users upgrading versions",
    "Add timestamps for when sections were last updated"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "Quick fixes for common issues",
      "Parse errors and fallback modes",
      "Out of memory errors",
      "Performance issues and optimization",
      "Cache corruption and troubleshooting",
      "Cache pruning configuration and strategies",
      "File permission errors",
      "Git history errors",
      "Coverage file issues",
      "Threshold and preset configuration",
      "JSON format issues (legacy vs unified)",
      "Context provider troubleshooting",
      "Debug mode and verbosity levels",
      "Performance tips with parallelism and caching",
      "Advanced analysis troubleshooting",
      "Tiered prioritization system",
      "File-level scoring",
      "Error messages reference",
      "Language-specific issues (Rust, Python, JavaScript, TypeScript)",
      "False positives and entropy configuration",
      "Output formatting issues",
      "Compare command troubleshooting",
      "Validate command troubleshooting",
      "Comprehensive FAQ",
      "Bug reporting guidelines"
    ],
    "validation_focus": "Check troubleshooting covers common user issues",
    "total_issues": 11,
    "high_severity": 1,
    "medium_severity": 4,
    "low_severity": 6,
    "total_lines": 1903,
    "sections_count": 19,
    "code_examples_count": "150+",
    "comprehensive_coverage": true
  }
}
