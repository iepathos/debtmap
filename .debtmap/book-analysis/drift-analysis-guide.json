{
  "chapter_id": "analysis-guide",
  "chapter_title": "Analysis Guide",
  "chapter_file": "book/src/analysis-guide.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter is comprehensive and well-structured with good explanations of all major analysis features. Has some minor inconsistencies in risk scoring terminology and missing details about entropy configuration fields.",
  "issues": [
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Risk Scoring - Risk Categories",
      "description": "Chapter mentions 'WellTested' category but actual implementation may use different naming",
      "current_content": "**WellTested** (score < 5 with high coverage)",
      "should_verify": "Check if RiskLevel enum includes WellTested variant or uses different naming (Low, Medium, High, Critical found in code)",
      "fix_suggestion": "Verify the actual RiskLevel enum values and update the risk categories section to match implementation exactly",
      "source_reference": "src/data_flow.rs:312 and src/io/writers/enhanced_markdown/executive_summary.rs:106"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Entropy-Based Complexity Analysis - Configuration",
      "description": "Chapter shows entropy configuration but doesn't explain all fields found in EntropyScore struct",
      "current_content": "Shows config fields: enabled, weight, use_classification, pattern_threshold, entropy_threshold, branch_threshold, max_combined_reduction",
      "should_add": "Document the additional entropy output fields: unique_variables, max_nesting, dampening_applied",
      "fix_suggestion": "Add explanation of what unique_variables and max_nesting contribute to the entropy analysis, and clarify dampening_applied vs dampening_factor",
      "source_reference": "src/complexity/entropy_core.rs:7 EntropyScore struct"
    },
    {
      "type": "unclear_content",
      "severity": "low",
      "section": "Entropy-Based Complexity - Dampening threshold",
      "description": "Chapter states 'When entropy score > 0.1' but the logic is complex and may not be accurately represented",
      "current_content": "**Dampening threshold:** When entropy score > 0.1, complexity is reduced",
      "should_be": "Clarify the actual dampening decision logic based on multiple factors (token_entropy, pattern_repetition, branch_similarity)",
      "fix_suggestion": "Explain that dampening is applied when a combination of factors indicates repetitive patterns, not just a single threshold. Reference the actual decision logic.",
      "source_reference": "src/complexity/entropy_core.rs and dampening logic in analyzers"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Analyzer Types - Language Support",
      "description": "Chapter doesn't mention Language::Unknown variant",
      "current_content": "Lists Rust, Python, JavaScript, TypeScript",
      "should_add": "Mention that there's an Unknown language variant for unsupported file types",
      "fix_suggestion": "Add brief note that files with unsupported extensions are classified as Language::Unknown",
      "source_reference": "src/core/mod.rs:318 Language enum with Unknown variant"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Advanced Features - Purity Detection",
      "description": "Purity detection explanation is good but doesn't mention it's optional (Option<bool>)",
      "current_content": "Shows purity confidence scoring and examples",
      "should_add": "Clarify that purity detection is optional and may not be available for all functions/languages",
      "fix_suggestion": "Add note that is_pure and purity_confidence are Option types and may be None for some functions",
      "source_reference": "src/core/mod.rs:55-56 FunctionMetrics struct"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Function Metrics - Fields",
      "description": "JSON example doesn't include all fields from actual FunctionMetrics struct",
      "current_content": "Shows main fields but missing: is_trait_method, in_test_module, detected_patterns",
      "should_add": "Document is_trait_method (whether function implements a trait), in_test_module (whether inside #[cfg(test)]), and detected_patterns (patterns identified for complexity adjustment)",
      "fix_suggestion": "Add these fields to the JSON structure section with explanations of their purpose",
      "source_reference": "src/core/mod.rs:42 FunctionMetrics struct definition"
    },
    {
      "type": "verification",
      "severity": "low",
      "section": "Debt Patterns - Count",
      "description": "Chapter claims '13 types of technical debt' - verified accurate",
      "current_content": "Identifies 13 types of technical debt",
      "verification": "Verified: Todo, Fixme, CodeSmell, Duplication, Complexity, Dependency, ErrorSwallowing, ResourceManagement, CodeOrganization, TestComplexity, TestTodo, TestDuplication, TestQuality = 13 types",
      "fix_suggestion": "Count is accurate, no change needed",
      "source_reference": "src/core/mod.rs:173 DebtType enum"
    }
  ],
  "positive_aspects": [
    "Excellent comprehensive coverage of complexity metrics with clear explanations and thresholds",
    "Very detailed explanation of entropy-based complexity analysis with concrete examples",
    "Great progression from basic concepts to advanced features",
    "Strong practical examples showing before/after refactoring impacts",
    "Clear categorization of debt patterns by severity weight",
    "Good explanation of risk scoring formula and categories",
    "Helpful terminal and JSON output examples that match actual usage",
    "Well-structured sections that build on each other logically"
  ],
  "improvement_suggestions": [
    "Add a quick reference table mapping DebtType variants to their weights",
    "Include a troubleshooting section for common entropy analysis questions (e.g., 'Why isn't dampening being applied?')",
    "Add cross-references between related sections (e.g., link from Complexity section to Risk Scoring)",
    "Consider adding a decision tree flowchart for 'What should I fix first?'",
    "Add examples of how different languages (Python vs Rust vs JS) might produce different analysis results",
    "Include performance tips for analyzing very large codebases",
    "Add section on interpreting the differences between cyclomatic and cognitive complexity in practice"
  ],
  "metadata": {
    "analyzed_at": "2025-10-09",
    "feature_inventory": "Generated from source code analysis",
    "topics_covered": [
      "Complexity metrics",
      "Debt patterns",
      "Risk scoring",
      "Interpreting results",
      "Analyzer types",
      "Advanced features"
    ],
    "validation_focus": "Ensure all analyzer types and metrics are explained"
  }
}
