{
  "chapter_id": "examples",
  "chapter_title": "Examples",
  "chapter_file": "book/src/examples.md",
  "drift_detected": false,
  "severity": "good",
  "quality_assessment": "Excellent chapter with comprehensive, accurate examples. All previously identified issues have been fixed. All CLI syntax verified against implementation. No significant drift detected. Chapter is production-ready.",
  "issues": [
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Custom Thresholds (lines 82-91)",
      "description": "Threshold presets explained but specific numeric values not documented",
      "current_content": "**Preset configurations:**\n- **Strict**: Lower thresholds for high quality standards (good for new projects)\n- **Balanced**: Default thresholds suitable for typical projects\n- **Lenient**: Higher thresholds designed for legacy codebases with existing technical debt",
      "should_add": "Add table showing exact threshold values for each preset (e.g., strict: complexity=8, duplication=30; balanced: complexity=10, duplication=50; lenient: complexity=15, duplication=75)",
      "fix_suggestion": "Add subsection with table detailing the specific threshold values for each preset configuration",
      "source_reference": "features.json:threshold_options.threshold_preset"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced Usage - Verbosity Levels (lines 747-762)",
      "description": "Could clarify what information each verbosity level reveals",
      "should_add": "Explain what each verbosity level shows:\n  -v: Score factor breakdowns and purity distribution\n  -vv: Detailed calculations, coverage lookups, and metric computations\n  -vvv: Full debug information including AST details and parser internals",
      "fix_suggestion": "Add brief explanation of what each verbosity level reveals for debugging and understanding analysis decisions",
      "source_reference": "features.json:verbosity_options.verbosity"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced Usage - Parallel Processing Control (lines 765-772)",
      "description": "Could add guidance on when to adjust parallel processing",
      "should_add": "Add note: 'Use --jobs to control thread count for CPU-bound systems or to limit resource usage in CI environments. Default uses all available cores.'",
      "fix_suggestion": "Add practical guidance on when and why to adjust parallel processing settings",
      "source_reference": "features.json:performance_options.jobs"
    }
  ],
  "positive_aspects": [
    "ALL PREVIOUS ISSUES FIXED: Cache management, god_object config, GitLab CI, --lcov alias, unified/legacy JSON, threshold presets",
    "Comprehensive coverage of all major features and commands",
    "Excellent progression from simple to complex examples",
    "Practical, copy-paste ready code examples that are verified to work",
    "Real-world CI/CD integration examples (GitHub Actions, GitLab CI, CircleCI)",
    "Clear explanations of output formats with practical jq examples",
    "Exceptional purity-weighted god object scoring explanation with concrete examples (lines 110-164)",
    "Good use of notes and callouts to highlight important information",
    "Multi-language examples (Rust, Python, JavaScript/TypeScript)",
    "Compare command workflow well explained with practical use cases",
    "Configuration examples are valid and comprehensive",
    "Quick navigation links and table of contents for easy reference",
    "All CLI options verified against features.json",
    "Proper explanations of aliases and alternatives",
    "Entropy-based complexity well explained with benefits",
    "Coverage dampening concept clearly illustrated",
    "Shows both short and long form flags appropriately",
    "Real examples from Debtmap's own CI workflow demonstrate dogfooding",
    "Good cross-references to other chapters",
    "Tips and Best Practices section provides actionable guidance"
  ],
  "improvement_suggestions": [
    "Add table with specific threshold values for each preset (strict/balanced/lenient)",
    "Expand verbosity level explanations with concrete examples of output",
    "Add guidance on parallel processing tuning for different scenarios",
    "Include example of --validate-loc flag usage",
    "Add troubleshooting subsection for common coverage path mapping issues",
    "Consider adding a 'Quick Reference' table at the beginning",
    "Include estimated execution time ranges for CI workflows",
    "Add example showing multiple filters combined: --filter Architecture,Testing",
    "Show example of --detail-level usage with different values",
    "Add example demonstrating exit code interpretation in CI scripts",
    "Include more monorepo-specific examples and patterns",
    "Add example using environment variables for configuration",
    "Show example of --semantic-off when parser errors occur",
    "Consider adding 'Common Mistakes' section with antipatterns"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [
      "Analyzing Rust projects",
      "Python analysis",
      "JavaScript/TypeScript analysis",
      "CI integration (GitHub Actions, GitLab CI, CircleCI)",
      "Coverage integration with cargo-tarpaulin, jest, pytest",
      "Output formats (terminal, JSON, markdown)",
      "Advanced usage (context-aware, multi-pass, cache management)",
      "Configuration examples for all supported languages",
      "Compare command for tracking improvements",
      "God object detection with purity weighting",
      "Filtering and focusing strategies",
      "Threshold configuration and presets",
      "Aggregation methods",
      "Verbosity levels",
      "Parallel processing control"
    ],
    "validation_focus": "Ensure examples use current CLI syntax and options",
    "total_examples": 50,
    "total_lines": 1052,
    "code_blocks": 35,
    "languages_covered": ["rust", "python", "javascript", "typescript"],
    "ci_platforms_covered": ["github_actions", "gitlab_ci", "circleci"],
    "coverage_tools_shown": ["cargo-tarpaulin", "jest", "pytest"],
    "total_issues": 3,
    "high_severity": 0,
    "medium_severity": 0,
    "low_severity": 3,
    "issues_fixed_since_last_analysis": 6,
    "previous_severity": "medium",
    "current_severity": "good",
    "status": "Production ready - all critical and medium issues resolved"
  }
}
