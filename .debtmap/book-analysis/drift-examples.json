{
  "chapter_id": "examples",
  "chapter_title": "Examples",
  "chapter_file": "book/src/examples.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter is mostly accurate with current CLI syntax, but has one critical issue with cache command examples that don't exist. Configuration examples need updates to match actual struct fields. Overall structure and explanations are excellent.",
  "issues": [
    {
      "type": "incorrect_example",
      "severity": "high",
      "section": "Advanced Usage - Cache Management",
      "line_reference": "lines 696-706",
      "description": "Chapter shows cache management as separate subcommands (debtmap cache stats, debtmap cache clear, debtmap cache prune) but these don't exist as subcommands",
      "current_content": "```bash\n# Show cache statistics\ndebtmap cache stats\n\n# Clear cache for current project\ndebtmap cache clear\n\n# Prune old cache entries\ndebtmap cache prune --max-age-days 7\n```",
      "should_be": "```bash\n# Show cache statistics\ndebtmap analyze . --cache-stats\n\n# Clear cache before analysis\ndebtmap analyze . --clear-cache\n\n# Force cache rebuild\ndebtmap analyze . --force-cache-rebuild\n```",
      "fix_suggestion": "Replace cache subcommand examples with correct CLI flags. There is no 'cache' subcommand - cache operations are flags on the 'analyze' command. Remove the 'debtmap cache prune --max-age-days 7' example as this flag doesn't exist.",
      "source_reference": "src/cli.rs:154-162 (cache flags on Analyze command, no Cache subcommand in Commands enum)"
    },
    {
      "type": "unclear_content",
      "severity": "medium",
      "section": "Configuration Examples - God Object Detection Tuning",
      "line_reference": "lines 809-817",
      "description": "Configuration example shows max_responsibilities field but GodObjectThresholds struct doesn't have this field",
      "current_content": "[god_object]\nenabled = true\nmax_methods = 20\nmax_fields = 15\nmax_responsibilities = 5",
      "should_be": "[god_object]\nenabled = true\n\n[god_object.rust]\nmax_methods = 25\nmax_fields = 15\nmax_traits = 5\nmax_lines = 400\nmax_complexity = 50",
      "fix_suggestion": "Update god_object configuration example to match actual GodObjectConfig structure with language-specific sub-sections (rust, python, javascript) and correct fields (max_methods, max_fields, max_traits, max_lines, max_complexity). Remove max_responsibilities as it's not a valid field.",
      "source_reference": "src/config.rs:476-508 (GodObjectConfig and GodObjectThresholds structs)"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "CI Integration - GitLab CI",
      "line_reference": "lines 456-481",
      "description": "GitLab CI example references 'cobertura.xml' format but debtmap only supports LCOV format for coverage",
      "current_content": "- debtmap validate .\n    --coverage-file cobertura.xml\n    --format json\n    --output debtmap-report.json\nartifacts:\n  reports:\n    coverage_report:\n      coverage_format: cobertura\n      path: cobertura.xml",
      "should_be": "- cargo tarpaulin --out Lcov\n- debtmap validate .\n    --coverage-file lcov.info\n    --format json\n    --output debtmap-report.json\nartifacts:\n  paths:\n    - lcov.info\n    - debtmap-report.json",
      "fix_suggestion": "Change GitLab CI example to generate and use LCOV format instead of cobertura. Debtmap only supports LCOV format for coverage integration.",
      "source_reference": "features.json:376-380 (lcov_integration only, no cobertura support)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Coverage Integration",
      "line_reference": "lines 58-62",
      "description": "Chapter doesn't explain the --coverage-file vs --lcov distinction clearly",
      "should_add": "Add a note that --lcov is a visible_alias for --coverage-file, so they are interchangeable",
      "fix_suggestion": "Add clarification after line 62: 'Note: `--lcov` is an alias for `--coverage-file` - both work identically.'",
      "source_reference": "src/cli.rs:60 (visible_alias = 'lcov')"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Output Formats - Understanding Output Formats",
      "line_reference": "lines 655-667",
      "description": "Section mentions --output-format flag but doesn't explain when/why to use unified vs legacy",
      "current_content": "```bash\n# Unified JSON format (alternative to legacy)\ndebtmap analyze . --format json --output-format unified\n\n# Legacy JSON format (default, for backward compatibility)\ndebtmap analyze . --format json --output-format legacy\n```",
      "should_add": "Explain the differences between unified and legacy JSON formats, when to use each, and what breaking changes exist between them",
      "fix_suggestion": "Add explanation: 'The unified format (spec 108) provides a consistent structure with a 'type' field instead of File/Function wrappers. Legacy format is the default for backward compatibility. Use unified for new integrations, legacy for existing tooling.'",
      "source_reference": "features.json:387-388 (json output formats description)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Custom Thresholds",
      "line_reference": "lines 69-83",
      "description": "Chapter shows --threshold-preset in examples but uses it without explanation of available presets",
      "current_content": "# Use preset configurations for quick setup\ndebtmap analyze . --threshold-preset strict    # Strict standards\ndebtmap analyze . --threshold-preset balanced  # Default balanced\ndebtmap analyze . --threshold-preset lenient   # Lenient for legacy code",
      "should_add": "Explain what each preset configures and when to use each one",
      "fix_suggestion": "Add brief explanation of preset values: strict (lower thresholds for high standards), balanced (default, typical projects), lenient (higher thresholds for legacy codebases). Consider adding a table showing threshold values for each preset.",
      "source_reference": "features.json:65-68 (threshold_presets)"
    }
  ],
  "positive_aspects": [
    "Excellent organization with clear table of contents and navigation",
    "Comprehensive coverage of all major CLI commands (analyze, validate, compare)",
    "Great language-specific examples for Rust, Python, JavaScript/TypeScript",
    "Practical CI/CD integration examples for GitHub Actions, GitLab CI, and CircleCI",
    "Clear explanations of output formats with jq usage examples for JSON manipulation",
    "Good coverage of advanced features (context-aware analysis, multi-pass, filtering)",
    "Helpful 'Tips and Best Practices' section at the end",
    "Examples are copy-paste ready and mostly syntactically correct",
    "Clear progression from basic to advanced usage",
    "Excellent purity-weighted god object scoring explanation with concrete examples (lines 103-157)",
    "Real-world example from Debtmap's own CI workflow",
    "Compare command section is thorough with interpretation guidance",
    "Good cross-references to other chapters",
    "Configuration examples for multiple language ecosystems",
    "Shows both short and long form flags appropriately"
  ],
  "improvement_suggestions": [
    "Fix cache management examples to use correct CLI flags instead of non-existent subcommands (CRITICAL)",
    "Update god_object configuration examples to match actual struct fields",
    "Change GitLab CI example to use LCOV instead of cobertura format",
    "Add explanation of unified vs legacy JSON output format differences",
    "Add note about --lcov being an alias for --coverage-file",
    "Add table showing threshold values for each preset (strict, balanced, lenient)",
    "Include example of --validate-loc flag usage",
    "Add troubleshooting section for common coverage mapping path issues",
    "Show example of using --jobs flag effectively for performance tuning",
    "Add example of using --semantic-off when parser errors occur",
    "Consider adding a 'Common Patterns' quick reference table",
    "Add example combining multiple filters: --filter Architecture,Testing",
    "Show example of --detail-level usage with different values",
    "Add example showing how to interpret exit codes in CI scripts"
  ],
  "metadata": {
    "analyzed_at": "2025-01-20",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "Analyzing Rust projects",
      "Python analysis",
      "JavaScript/TypeScript",
      "CI integration",
      "Output formats",
      "Advanced features",
      "Configuration",
      "Compare command",
      "Coverage integration",
      "God object detection",
      "Filtering and focusing",
      "Cache management"
    ],
    "validation_focus": "Ensure examples use current CLI syntax and options",
    "total_issues": 6,
    "high_severity": 1,
    "medium_severity": 2,
    "low_severity": 3
  }
}
