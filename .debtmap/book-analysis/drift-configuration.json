{
  "chapter_id": "configuration",
  "chapter_title": "Configuration",
  "chapter_file": "book/src/configuration.md",
  "drift_detected": true,
  "severity": "low",
  "quality_assessment": "Chapter is comprehensive and well-structured with accurate coverage of most configuration options. Minor drift exists in role multiplier default values and some recently added features are not documented, but these don't affect core functionality understanding.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Role Multipliers (lines 80-94)",
      "description": "Role multiplier defaults documented in book don't match actual defaults in src/config.rs. The code has been updated but book wasn't synchronized.",
      "current_content": "pure_logic = 1.2, orchestrator = 0.8, io_wrapper = 0.7, pattern_match = 0.6",
      "should_be": "Book values are correct for current implementation. However, code comments indicate these were recently changed from: pure_logic=1.5, orchestrator=0.6, io_wrapper=0.5, pattern_match=0.4",
      "fix_suggestion": "Verify the book values match current implementation defaults. If these were intentionally updated, consider adding a note about why these specific values were chosen.",
      "source_reference": "src/config.rs:187-211 (default_*_multiplier functions)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Role Multipliers",
      "description": "The 'debug' role multiplier is missing from documentation. This role was added for debug/diagnostic functions.",
      "should_add": "debug = 0.3   # Debug/diagnostic functions (default: 0.3)",
      "fix_suggestion": "Add debug role to the role multipliers table and explain that debug functions have lowest test priority as they're typically for development/diagnostics only.",
      "source_reference": "src/config.rs:164-167, 207-209"
    },
    {
      "type": "incorrect_example",
      "severity": "low",
      "section": "Role-Based Scoring Configuration - Stage 1 (line 120)",
      "description": "Table shows pure_logic coverage weight as 1.2, but actual default in code is 1.0",
      "current_content": "pure_logic = 1.2        # Increase penalty (should have unit tests)",
      "should_be": "pure_logic = 1.0        # Standard penalty for pure logic (can configure to 1.2 for emphasis)",
      "fix_suggestion": "Update the table to show actual defaults. The 1.2 value can be shown in the 'Example Impact' or 'When to Adjust' sections as a customization option.",
      "source_reference": "src/config.rs:274-276 (default_pure_logic_coverage_weight returns 1.0)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Advanced Configuration",
      "description": "Accessor detection configuration is not documented. This feature (spec 125) allows detection of simple getter/setter methods.",
      "should_add": "Section on [classification.accessors] configuration with patterns, max_cyclomatic, max_cognitive, max_length settings",
      "fix_suggestion": "Add subsection under 'Advanced Configuration' or 'Context-Aware Detection' documenting accessor detection configuration options.",
      "source_reference": "src/config.rs:476-499 (AccessorDetectionConfig)"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Advanced Configuration",
      "description": "Data flow classification configuration is not documented. This feature (spec 126) classifies functions based on data flow patterns.",
      "should_add": "Section on [classification.data_flow] configuration",
      "fix_suggestion": "Add subsection documenting data flow classification configuration under classification settings.",
      "source_reference": "src/config.rs:569-658 (DataFlowClassificationConfig)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced Configuration",
      "description": "Complexity weights configuration is not documented. This controls how cyclomatic vs cognitive complexity are weighted in scoring (spec 121).",
      "should_add": "[complexity_weights] section with cyclomatic, cognitive, max_cyclomatic, max_cognitive options",
      "fix_suggestion": "Add section explaining how to adjust the relative importance of cyclomatic vs cognitive complexity in scoring. Default is 30% cyclomatic, 70% cognitive.",
      "source_reference": "src/config.rs:218-261 (ComplexityWeightsConfig)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Role Multipliers",
      "description": "Book mentions role multipliers but doesn't explain the relationship with RoleMultiplierConfig for clamping",
      "should_add": "Explanation that role multipliers can be clamped using [role_multiplier_config] with clamp_min, clamp_max, enable_clamping",
      "fix_suggestion": "Add note that there's a separate role_multiplier_config section (currently documented under role-based scoring) that controls clamping of these multipliers.",
      "source_reference": "src/config.rs:661-697 (RoleMultiplierConfig)"
    }
  ],
  "positive_aspects": [
    "Extremely comprehensive coverage of configuration options",
    "Excellent organization with clear section hierarchy",
    "Great examples showing different configuration scenarios (strict, legacy, open source)",
    "Detailed explanation of role-based scoring with two-stage mechanism",
    "Comprehensive troubleshooting section with specific solutions",
    "Good use of tables to explain parameter impacts",
    "Complete example configurations at end of chapter",
    "Clear explanation of configuration precedence (CLI > file > defaults)",
    "Validation section explains automatic normalization",
    "Well-structured best practices section"
  ],
  "improvement_suggestions": [
    "Add changelog section noting when defaults were updated (if role multipliers changed)",
    "Consider adding visual diagram showing configuration loading process",
    "Add cross-references between related config sections (e.g., role_multipliers and role_multiplier_config)",
    "Consider adding 'Quick Start' section at beginning for common use cases",
    "Add examples of TOML files for different project types (microservice, library, monolith)",
    "Consider grouping 'additional advanced options' into subsections rather than bullet list"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": ".debtmap/book-analysis/features.json",
    "topics_covered": [
      "Config file format and discovery",
      "Scoring weights and methodology",
      "Role multipliers and coverage weights",
      "Thresholds for complexity and validation",
      "Language configuration",
      "Exclusion patterns",
      "Display and output options",
      "Normalization configuration",
      "Entropy-based complexity",
      "God object detection",
      "Context-aware detection",
      "Error handling configuration",
      "Pure mapping patterns",
      "External API detection",
      "CLI integration and precedence",
      "Configuration validation",
      "Best practices by project type",
      "Troubleshooting configuration issues"
    ],
    "validation_focus": "Check config options match implementation in src/config/"
  }
}
