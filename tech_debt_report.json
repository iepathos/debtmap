════════════════════════════════════════════
    PRIORITY TECHNICAL DEBT FIXES
════════════════════════════════════════════

🎯 TOP 10 RECOMMENDATIONS (by unified priority)

#1 SCORE: 5.0 [MEDIUM]
├─ COMPLEXITY: ./src/organization/god_object_detector.rs:324 TypeVisitor::visit_item_impl()
├─ ACTION: Extract 3 pure functions to reduce complexity from 7 to <10, then add comprehensive tests
├─ IMPACT: -3 complexity, -3.2 risk
├─ COMPLEXITY: cyclomatic=7, branches=7, cognitive=20, nesting=0
└─ WHY: High complexity function (cyclo=7, cog=20) likely with low coverage - needs testing and refactoring

#2 SCORE: 5.0 [MEDIUM]
├─ RISK: ./src/analyzers/javascript/detectors/security.rs:372 detect_unsafe_deserialization()
├─ ACTION: Simplify function structure and improve testability
├─ IMPACT: -1.9 risk
├─ COMPLEXITY: cyclomatic=5, branches=5, cognitive=13, nesting=0
├─ DEPENDENCIES: 1 upstream, 3 downstream
│  ├─ CALLERS: detect_security_patterns
│  └─ CALLS: contains_user_input, ContextMap::iter, SourceLocation::from_node
└─ WHY: Risk score 2.5: Cognitive complexity: 13

#3 SCORE: 5.0 [MEDIUM]
├─ RISK: ./src/analyzers/javascript/detectors/testing.rs:410 detect_snapshot_overuse()
├─ ACTION: Extract 2 pure functions (complexity 6 → 3), then add 6 comprehensive tests
├─ IMPACT: -1.8 risk
├─ COMPLEXITY: cyclomatic=6, branches=6, cognitive=15, nesting=0
├─ DEPENDENCIES: 1 upstream, 3 downstream
│  ├─ CALLERS: detect_testing_patterns
│  └─ CALLS: get_node_text, SourceLocation::from_node, ContextMap::iter
└─ WHY: Risk score 2.9: Moderate complexity (cyclomatic: 6), Cognitive complexity: 15

#4 SCORE: 5.0 [MEDIUM]
├─ RISK: ./src/main.rs:1656 create_unified_analysis_with_exclusions()
├─ ACTION: Extract 2 pure functions (complexity 7 → 3), then add 6 comprehensive tests
├─ IMPACT: -2.0 risk
├─ COMPLEXITY: cyclomatic=7, branches=7, cognitive=13, nesting=0
├─ DEPENDENCIES: 2 upstream, 15 downstream
│  ├─ CALLERS: calculate_unified_debt_score, perform_unified_analysis
│  └─ CALLS: UnifiedAnalysis::add_item, UnifiedAnalysis::new, UnifiedAnalysis::calculate_total_impact, ... (12 more)
└─ WHY: Risk score 3.7: Moderate complexity (cyclomatic: 7), Cognitive complexity: 13, Long function (79 lines)

#5 SCORE: 5.0 [MEDIUM]
├─ ORCHESTRATION: ./src/risk/evidence_calculator.rs:72 EvidenceBasedRiskCalculator::classify_function_role()
├─ ACTION: Refactor to pure functions or extract testable units
├─ IMPACT: -0.1 risk
├─ COMPLEXITY: cyclomatic=1, branches=1, cognitive=0, nesting=0
├─ DEPENDENCIES: 10 upstream, 3 downstream
│  ├─ CALLERS: determine_debt_type, create_unified_debt_item, create_unified_debt_item_with_aggregator, ... (7 more)
│  └─ CALLS: EvidenceBasedRiskCalculator::visibility_to_string, EvidenceBasedRiskCalculator::classify_function_role, RiskAnalyzer::clone
└─ WHY: Orchestration function delegating to 3 functions

#6 SCORE: 5.0 [MEDIUM]
├─ ORCHESTRATION: ./src/risk/evidence/coverage_analyzer.rs:405 CoverageRiskAnalyzer::identify_critical_paths()
├─ ACTION: Refactor to pure functions or extract testable units
├─ IMPACT: -0.1 risk
├─ COMPLEXITY: cyclomatic=1, branches=1, cognitive=2, nesting=0
├─ DEPENDENCIES: 7 upstream, 3 downstream
│  ├─ CALLERS: tests::test_identify_critical_paths_unknown_role, tests::test_identify_critical_paths_single_path, CoverageRiskAnalyzer::get_coverage_actions, ... (4 more)
│  └─ CALLS: CoverageRiskAnalyzer::generate_path_name, LazyPipeline::collect, LazyPipeline::map
└─ WHY: Orchestration function delegating to 3 functions

#7 SCORE: 5.0 [MEDIUM]
├─ COMPLEXITY: ./src/context/mod.rs:213 detect_file_type()
├─ ACTION: Extract 4 pure functions to reduce complexity from 7 to <10, then add comprehensive tests
├─ IMPACT: -3 complexity, -3.1 risk
├─ COMPLEXITY: cyclomatic=7, branches=7, cognitive=29, nesting=0
├─ DEPENDENCIES: 1 upstream, 0 downstream
│  ├─ CALLERS: ContextAwareAnalyzer::filter_debt_items
└─ WHY: High complexity function (cyclo=7, cog=29) likely with low coverage - needs testing and refactoring

#8 SCORE: 5.0 [MEDIUM]
├─ COMPLEXITY: ./src/context/mod.rs:277 detect_function_role()
├─ ACTION: Extract 4 pure functions to reduce complexity from 7 to <10, then add comprehensive tests
├─ IMPACT: -3 complexity, -3.2 risk
├─ COMPLEXITY: cyclomatic=7, branches=7, cognitive=29, nesting=0
├─ DEPENDENCIES: 2 upstream, 0 downstream
│  ├─ CALLERS: ContextDetector::visit_item_impl, ContextDetector::analyze_function
└─ WHY: High complexity function (cyclo=7, cog=29) likely with low coverage - needs testing and refactoring

#9 SCORE: 5.0 [MEDIUM]
├─ RISK: ./src/complexity/patterns.rs:209 PatternDetector::check_recursive_function_call()
├─ ACTION: Simplify function structure and improve testability
├─ IMPACT: -1.9 risk
├─ COMPLEXITY: cyclomatic=5, branches=5, cognitive=11, nesting=0
├─ DEPENDENCIES: 1 upstream, 0 downstream
│  ├─ CALLERS: PatternDetector::handle_call_expr
└─ WHY: Risk score 1.9: Cognitive complexity: 11

#10 SCORE: 5.0 [MEDIUM]
├─ RISK: ./src/io/writers/markdown.rs:360 MarkdownWriter::write_high_priority_items()
├─ ACTION: Simplify function structure and improve testability
├─ IMPACT: -1.7 risk
├─ COMPLEXITY: cyclomatic=5, branches=5, cognitive=10, nesting=0
├─ DEPENDENCIES: 1 upstream, 7 downstream
│  ├─ CALLERS: MarkdownWriter::write_technical_debt
│  └─ CALLS: CallGraph::is_empty, LazyPipeline::filter, LazyPipeline::collect, ... (4 more)
└─ WHY: Risk score 2.0: Cognitive complexity: 10

📊 TOTAL DEBT SCORE: 2541
