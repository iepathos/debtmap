{
  "patterns": [
    "Modular"
  ],
  "layers": [],
  "components": {
    "transformers": {
      "name": "transformers",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn compose_transformers<T:",
        "fn transform_metrics<F>(metrics:",
        "fn map_functions<F>(metrics:",
        "fn filter_functions<F>(metrics:",
        "fn sort_functions_by_complexity(metrics:",
        "fn limit_results(metrics:",
        "fn combine_file_metrics(metrics:",
        "fn enrich_with_context(metrics:"
      ],
      "dependencies": []
    },
    "analyzers": {
      "name": "analyzers",
      "responsibility": "Module functionality",
      "interfaces": [
        "trait Analyzer:",
        "fn analyze_file",
        "fn compose_analyzers",
        "fn get_analyzer(language:"
      ],
      "dependencies": [
        "anyhow",
        "syn",
        "rustpython_parser"
      ]
    },
    "core": {
      "name": "core",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct AnalysisResults",
        "struct ComplexityReport",
        "struct ComplexitySummary",
        "struct FunctionMetrics",
        "fn new(name:",
        "fn is_complex(&self,",
        "struct TechnicalDebtReport",
        "struct DebtItem",
        "struct DependencyReport",
        "struct ModuleDependency",
        "struct CircularDependency",
        "struct DuplicationBlock",
        "struct DuplicationLocation",
        "struct FileMetrics",
        "struct ComplexityMetrics",
        "struct Dependency",
        "fn from_extension(ext:"
      ],
      "dependencies": [
        "anyhow",
        "chrono",
        "im",
        "serde",
        "sha2",
        "tempfile"
      ]
    },
    "io": {
      "name": "io",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn read_file(path:",
        "fn write_file(path:",
        "fn ensure_dir(path:",
        "fn file_exists(path:",
        "fn dir_exists(path:"
      ],
      "dependencies": [
        "anyhow",
        "ignore",
        "colored",
        "serde_json;"
      ]
    },
    "complexity": {
      "name": "complexity",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct ComplexityCalculator",
        "fn new(cyclomatic_threshold:",
        "fn is_complex(&self,",
        "fn calculate_score(&self,",
        "fn combine_complexity(a:",
        "fn max_complexity(complexities:",
        "fn average_complexity(complexities:"
      ],
      "dependencies": [
        "syn"
      ]
    },
    "debt": {
      "name": "debt",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn categorize_debt(items:",
        "fn prioritize_debt(items:",
        "fn filter_by_priority(items:",
        "fn filter_by_type(items:",
        "fn group_by_file(items:",
        "fn calculate_debt_score(item:",
        "fn total_debt_score(items:"
      ],
      "dependencies": [
        "sha2",
        "regex"
      ]
    }
  },
  "violations": []
}