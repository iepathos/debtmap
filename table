============================================
    Debtmap v0.2.1
============================================

[TARGET] TOP 10 RECOMMENDATIONS

#1 SCORE: 10.00 [CRITICAL]
- LOCATION: src/analyzers/context_aware.rs:40 ContextAwareAnalyzer::filter_debt_items()
- ACTION: Extract validation logic, complex calculations to reduce complexity 13 → ~5
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=13 (adj:13), branches=13, cognitive=28, nesting=3, entropy=0.29
- DEPENDENCIES: 1 upstream, 10 downstream
   - CALLERS: ContextAwareAnalyzer::analyze
   - CALLS: debt_type_to_pattern, adjust_priority, ContextDetector::get_context_for_line, ... (7 more)
- WHY: Complex function (cyclo=13, cog=28, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 61%

#2 SCORE: 10.00 [CRITICAL]
- LOCATION: src/analyzers/javascript/detectors/resource.rs:200 detect_timer_leaks()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 18 → ~0
- IMPACT: -9 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=18 (adj:18), branches=18, cognitive=67, nesting=7, entropy=0.35
- DEPENDENCIES: 1 upstream, 5 downstream
   - CALLERS: detect_resource_patterns
   - CALLS: get_node_text, Applicative::unwrap, extract_variable_name, ... (2 more)
- WHY: Complex function (cyclo=18, cog=67, nesting=7) with 3 suggested extraction patterns. Predicted complexity reduction: 105%

#3 SCORE: 10.00 [CRITICAL]
- LOCATION: src/analyzers/signature_extractor.rs:122 SignatureExtractor::detect_builder_patterns()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 9 → ~0
- IMPACT: -4 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=9 (adj:9), branches=9, cognitive=26, nesting=4, entropy=0.50
- DEPENDENCIES: 1 upstream, 8 downstream
   - CALLERS: SignatureExtractor::extract_from_file
   - CALLS: FunctionSignatureRegistry::get_all_methods, LazyPipeline::filter, ContextMap::iter, ... (5 more)
- WHY: Complex function (cyclo=9, cog=26, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 100%

#4 SCORE: 10.00 [CRITICAL]
- LOCATION: src/analysis/call_graph/function_pointer.rs:315 FunctionPointerVisitor::analyze_function_pointer_assignment()
- ACTION: Extract nested processing, complex calculations to reduce complexity 6 → ~1
- IMPACT: -3 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=6 (adj:6), branches=6, cognitive=15, nesting=5, entropy=0.28
- DEPENDENCIES: 1 upstream, 3 downstream
   - CALLERS: FunctionPointerVisitor::visit_local
   - CALLS: RiskAnalyzer::clone, FunctionPointerVisitor::extract_function_name_from_path, FunctionPointerVisitor::get_line_number
- WHY: Complex function (cyclo=6, cog=15, nesting=5) with 2 suggested extraction patterns. Predicted complexity reduction: 83%

#5 SCORE: 10.00 [CRITICAL]
- LOCATION: src/analysis/call_graph/framework_patterns.rs:339 PatternVisitor::analyze_attribute()
- ACTION: Extract validation logic to reduce complexity 8 → ~6
- IMPACT: -4 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=8 (adj:8), branches=8, cognitive=12, nesting=1, entropy=0.31
- DEPENDENCIES: 13 upstream, 11 downstream
   - CALLERS: tests::test_analyze_attribute_web_handler_get, tests::test_analyze_attribute_serialization_disabled, tests::test_analyze_attribute_macro_callback_disabled, ... (10 more)
   - CALLS: PatternVisitor::extract_attribute_name, LazyPipeline::collect, PatternVisitor::is_serialization_attribute, ... (8 more)
- WHY: Complex function (cyclo=8, cog=12, nesting=1) with 1 suggested extraction patterns. Predicted complexity reduction: 25%

#6 SCORE: 10.00 [CRITICAL]
- LOCATION: src/builders/unified_analysis.rs:277 create_unified_analysis_with_exclusions()
- ACTION: Extract process_input_pipeline (confidence: 78%) to reduce complexity from 7 to ~3
- IMPACT: -3 complexity, -3.4 risk
- COMPLEXITY: cyclomatic=7 (adj:7), branches=7, cognitive=13, nesting=2, entropy=0.27
- DEPENDENCIES: 2 upstream, 16 downstream
   - CALLERS: perform_unified_analysis_with_options, calculate_unified_debt_score
   - CALLS: LazyPipeline::collect, UnifiedAnalysis::new, DebtAggregator::new, ... (13 more)
- WHY: Cyclomatic complexity of 7 indicates 7 independent paths requiring 7 test cases minimum - extraction will reduce this to 3-5 tests per function. Function has 1 extractable patterns that can be isolated. This extraction will create a focused, testable unit. Target complexity per function is 5 or less for optimal maintainability.

#7 SCORE: 10.00 [CRITICAL]
- LOCATION: src/builders/call_graph.rs:48 process_rust_files_for_call_graph()
- ACTION: Extract validation logic to reduce complexity 12 → ~9
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=12 (adj:12), branches=12, cognitive=24, nesting=3, entropy=0.24
- DEPENDENCIES: 3 upstream, 17 downstream
   - CALLERS: build_sequential_call_graph, build_and_cache_graph, calculate_unified_debt_score
   - CALLS: RustCallGraphBuilder::build, RustCallGraphBuilder::analyze_trait_dispatch, find_project_files_with_config, ... (14 more)
- WHY: Complex function (cyclo=12, cog=24, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 25%

#8 SCORE: 10.00 [CRITICAL]
- LOCATION: src/builders/call_graph.rs:107 process_python_files_for_call_graph()
- ACTION: Extract nested processing, complex calculations to reduce complexity 6 → ~1
- IMPACT: -3 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=6 (adj:6), branches=6, cognitive=15, nesting=4, entropy=0.43
- DEPENDENCIES: 5 upstream, 5 downstream
   - CALLERS: build_and_cache_graph, build_parallel_call_graph, calculate_unified_debt_score, ... (2 more)
   - CALLS: PythonCallGraphAnalyzer::analyze_module_with_source, get_config, PythonCallGraphAnalyzer::new, ... (2 more)
- WHY: Complex function (cyclo=6, cog=15, nesting=4) with 2 suggested extraction patterns. Predicted complexity reduction: 83%

#9 SCORE: 10.00 [CRITICAL]
- LOCATION: src/config.rs:629 load_config()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 12 → ~0
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=12 (adj:12), branches=12, cognitive=37, nesting=6, entropy=0.50
- DEPENDENCIES: 1 upstream, 3 downstream
   - CALLERS: get_config_safe
   - CALLS: ScoreNormalizer::normalize, ScoringWeights::default, ScoringWeights::validate
- WHY: Complex function (cyclo=12, cog=37, nesting=6) with 3 suggested extraction patterns. Predicted complexity reduction: 100%

#10 SCORE: 10.00 [CRITICAL]
- LOCATION: src/complexity/match_patterns.rs:20 MatchExpressionRecognizer::is_simple_arm()
- ACTION: Extract validation logic to reduce complexity 11 → ~9
- IMPACT: -5 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=11 (adj:11), branches=11, cognitive=19, nesting=3, entropy=0.53
- DEPENDENCIES: 4 upstream, 1 downstream
   - CALLERS: MatchExpressionRecognizer::detect, RecursiveMatchDetector::calculate_match_complexity, detect_match_expression, ... (1 more)
   - CALLS: MatchExpressionRecognizer::is_simple_arm
- WHY: Complex function (cyclo=11, cog=19, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 18%

[STATS] TOTAL DEBT SCORE: 997
