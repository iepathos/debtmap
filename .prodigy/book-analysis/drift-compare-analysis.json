{
  "chapter_id": "compare-analysis",
  "chapter_title": "Compare Analysis",
  "chapter_file": "book/src/compare-analysis.md",
  "drift_detected": true,
  "severity": "critical",
  "quality_assessment": "Chapter is completely missing despite full implementation of compare command feature. This is a critical documentation gap that will prevent users from discovering and using this valuable feature.",
  "issues": [
    {
      "type": "missing_content",
      "severity": "critical",
      "section": "Entire Chapter",
      "description": "Chapter file does not exist. The compare command is fully implemented but completely undocumented.",
      "should_add": "Complete chapter documenting: command usage, target location tracking, project health metrics, regression detection, improvement tracking, before/after comparisons, CI/CD integration, output formats",
      "fix_suggestion": "Create comprehensive chapter following this outline:\n1. Introduction to compare command\n2. Basic usage and command-line options\n3. Target location tracking (exact, fuzzy matching)\n4. Project health metrics and trends\n5. Regression detection\n6. Improvement tracking and percentages\n7. Integration with IMPLEMENTATION_PLAN.md\n8. Output formats (JSON, Markdown)\n9. CI/CD integration examples\n10. Practical examples and use cases",
      "source_reference": "src/cli.rs:394-423, src/comparison/comparator.rs, src/commands/compare_debtmap.rs"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Command Syntax",
      "description": "No documentation of command-line syntax and required/optional arguments",
      "should_add": "Document: --before FILE, --after FILE, --plan FILE (optional), --target-location LOCATION (optional), --format (json|markdown), --output FILE (optional)",
      "fix_suggestion": "Add section showing:\n```bash\ndebtmap compare \\\n  --before path/to/before.json \\\n  --after path/to/after.json \\\n  --plan IMPLEMENTATION_PLAN.md \\\n  --format json \\\n  --output comparison.json\n```\nExplain each option with examples.",
      "source_reference": "src/cli.rs:400-422"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Target Location Tracking",
      "description": "No documentation of target location formats and matching strategies",
      "should_add": "Document location format: 'file:function:line' and matching strategies (Exact, FuzzyFunction, FuzzyFile) with confidence scores",
      "fix_suggestion": "Add section explaining:\n- Location format: src/main.rs:complex_function:42\n- How target locations are extracted from IMPLEMENTATION_PLAN.md\n- Alternative: manual --target-location flag\n- Matching strategies and confidence levels\n- What happens when target is resolved vs regressed vs unchanged",
      "source_reference": "src/comparison/comparator.rs:51-108, src/comparison/location_matcher.rs"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Project Health Metrics",
      "description": "No documentation of project-wide health comparison metrics",
      "should_add": "Document ProjectHealthComparison: total_debt_score, total_items, critical_items, high_priority_items, average_score, debt_score_change, debt_score_change_pct, items_change, critical_items_change",
      "fix_suggestion": "Add section showing:\n- What project health metrics are tracked\n- How to interpret before/after comparisons\n- Understanding debt trends (Improving, Stable, Regressing)\n- Example JSON output with explanations\n- How thresholds work (5% for stable, beyond that = improving/regressing)",
      "source_reference": "src/comparison/comparator.rs:194-204, 336-387"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Regression Detection",
      "description": "No documentation of how regressions are detected and reported",
      "should_add": "Document regression detection: new items with score >= 60.0, RegressionItem structure, how to interpret regression reports",
      "fix_suggestion": "Add section explaining:\n- What counts as a regression (new critical items with score >= 60)\n- How regressions are identified (not in before, present in after)\n- RegressionItem fields: location, score, debt_type, description\n- Example regression output\n- How to fix regressions in CI/CD pipelines",
      "source_reference": "src/comparison/comparator.rs:110-132, src/comparison/types.rs:RegressionItem"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Improvement Tracking",
      "description": "No documentation of improvement detection and percentage calculations",
      "should_add": "Document improvement types (Resolved, ScoreReduced), ImprovementMetrics (score_reduction_pct, complexity_reduction_pct, coverage_improvement_pct), thresholds for significant improvements (30% reduction)",
      "fix_suggestion": "Add section showing:\n- Two types of improvements: Resolved (item gone) and ScoreReduced (>30% reduction)\n- How percentages are calculated\n- ImprovementMetrics structure\n- Example showing before/after comparison\n- Best practices for tracking improvements over time",
      "source_reference": "src/comparison/comparator.rs:134-191, 307-334"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Before/After Metrics",
      "description": "No documentation of TargetMetrics and how they're aggregated",
      "should_add": "Document TargetMetrics: score, cyclomatic_complexity, cognitive_complexity, coverage, function_length, nesting_depth. Explain single vs multi-item aggregation.",
      "fix_suggestion": "Add section explaining:\n- What metrics are compared for target items\n- How metrics are aggregated when multiple items match\n- Understanding the improvement percentages\n- Example comparison output with interpretation\n- How to use this data to validate refactoring success",
      "source_reference": "src/comparison/comparator.rs:208-249, src/comparison/types.rs:TargetMetrics"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Integration with IMPLEMENTATION_PLAN.md",
      "description": "No documentation of how compare integrates with implementation plans",
      "should_add": "Document PlanParser, how to structure IMPLEMENTATION_PLAN.md for target location extraction, alternative manual target location specification",
      "fix_suggestion": "Add section showing:\n- How to include target location in IMPLEMENTATION_PLAN.md\n- Format expected by PlanParser\n- Alternative: --target-location flag\n- Benefits of tracking specific targets vs project-wide only\n- Example plan file structure",
      "source_reference": "tests/compare_integration_test.rs:26, 72, src/comparison/plan_parser.rs"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Output Formats",
      "description": "No documentation of JSON vs Markdown output formats",
      "should_add": "Document ComparisonResult JSON structure, Markdown format, when to use each, example outputs",
      "fix_suggestion": "Add section showing:\n- Complete JSON output structure (metadata, target_item, project_health, regressions, improvements, summary)\n- Markdown output format\n- When to use each (JSON for CI/CD, Markdown for reports)\n- How to parse and use the output programmatically\n- Example outputs for different scenarios (improvement, regression, stable)",
      "source_reference": "src/comparison/types.rs:ComparisonResult, tests/compare_integration_test.rs:145-154"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "CI/CD Integration",
      "description": "No documentation of how to integrate compare command in CI/CD pipelines",
      "should_add": "Document CI/CD workflow: run debtmap before changes, run after, compare results, fail on regressions, track improvements over time",
      "fix_suggestion": "Add section with:\n- Example GitHub Actions workflow\n- Example GitLab CI configuration\n- How to fail CI on regressions\n- How to track improvements over time\n- Best practices for storing before/after analyses\n- Using comparison results to gate deployments",
      "source_reference": "Design intention from command structure and validation integration"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Practical Examples",
      "description": "No worked examples showing real-world usage",
      "should_add": "Multiple examples: basic comparison, tracking specific function improvements, detecting regressions, project health monitoring, CI/CD integration",
      "fix_suggestion": "Add examples section with:\n1. Basic comparison of two analyses\n2. Tracking a specific function refactoring\n3. Detecting new complexity introduced in a PR\n4. Monitoring project health over releases\n5. Full CI/CD workflow example\n6. Interpreting different status outcomes (Improved, Resolved, Regressed, Unchanged)",
      "source_reference": "tests/compare_integration_test.rs test scenarios"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Troubleshooting",
      "description": "No troubleshooting guidance for common issues",
      "should_add": "Common issues: target not found, location format errors, JSON parsing errors, interpretation of status codes",
      "fix_suggestion": "Add troubleshooting section:\n- What to do when target location not found\n- How to debug location matching issues\n- Understanding TargetStatus values\n- Handling missing before/after files\n- Interpreting edge cases (empty analyses, all items resolved, etc.)",
      "source_reference": "Error handling in src/comparison/comparator.rs:91-95"
    }
  ],
  "positive_aspects": [
    "Command is fully implemented with comprehensive features",
    "Well-tested with integration tests covering multiple scenarios",
    "Clean API design with clear separation of concerns",
    "Flexible target location matching with confidence scores",
    "Rich output format with detailed metrics",
    "Good CI/CD integration design"
  ],
  "improvement_suggestions": [
    "Create the missing chapter immediately - this is a valuable feature users need to discover",
    "Include visual diagrams showing before/after comparison workflow",
    "Add decision tree for when to use compare vs validate commands",
    "Show real-world examples from actual refactoring projects",
    "Include sample JSON outputs for all scenarios (improved, regressed, stable, resolved)",
    "Add section on interpreting the different trend indicators",
    "Consider adding a quick-start guide at the beginning",
    "Link to related chapters on validation and CI/CD integration"
  ],
  "metadata": {
    "analyzed_at": "2025-10-25",
    "feature_inventory": "${FEATURES_PATH}",
    "topics_covered": [],
    "validation_focus": "Check that compare command features and workflow integration are documented",
    "implementation_files": [
      "src/cli.rs:394-423",
      "src/comparison/comparator.rs",
      "src/comparison/types.rs",
      "src/comparison/location_matcher.rs",
      "src/comparison/plan_parser.rs",
      "src/commands/compare_debtmap.rs",
      "tests/compare_integration_test.rs"
    ],
    "auto_generated": true,
    "source_feature": "compare_command"
  }
}
