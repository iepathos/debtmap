{
  "chapter_id": "examples",
  "chapter_title": "Examples",
  "chapter_file": "book/src/examples.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter has excellent comprehensive content but contains several CLI option name errors that will cause commands to fail. Flag names need updating to match actual implementation.",
  "issues": [
    {
      "type": "incorrect_example",
      "severity": "high",
      "section": "Output Formats - Understanding Output Formats",
      "description": "Chapter uses '--json-format' flag but the actual CLI uses '--output-format'",
      "current_content": "# Legacy JSON format for backward compatibility\ndebtmap analyze . --format json --json-format legacy\n\n# Output format options: terminal, json, markdown\ndebtmap analyze . --format terminal",
      "should_be": "# Legacy JSON format for backward compatibility\ndebtmap analyze . --format json --output-format legacy\n\n# Unified JSON format (default)\ndebtmap analyze . --format json --output-format unified",
      "fix_suggestion": "Replace '--json-format' with '--output-format' throughout chapter (appears in line 575). Note that the default is 'legacy' not 'unified'.",
      "source_reference": "src/cli.rs:37 - #[arg(long = \"output-format\", value_enum, default_value = \"legacy\")]"
    },
    {
      "type": "incorrect_example",
      "severity": "high",
      "section": "Compare Command - Target-Specific Comparison",
      "description": "Chapter shows '--target' option but CLI uses '--target-location'",
      "current_content": "# Target format: file:function:line\ndebtmap compare \\\n  --before before.json \\\n  --after after.json \\\n  --target src/main.rs:process_data:100",
      "should_be": "# Target format: file:function:line\ndebtmap compare \\\n  --before before.json \\\n  --after after.json \\\n  --target-location src/main.rs:process_data:100",
      "fix_suggestion": "Replace '--target' with '--target-location' in line 829",
      "source_reference": "src/cli.rs:298-301 - target_location: Option<String>"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Compare Command - Output Formats (line 849)",
      "description": "Chapter comment says terminal output is default, but CLI default for compare is json",
      "current_content": "# Terminal output (default)\ndebtmap compare --before before.json --after after.json",
      "should_be": "# JSON output (default)\ndebtmap compare --before before.json --after after.json\n\n# Terminal output (explicit)\ndebtmap compare --before before.json --after after.json --format terminal",
      "fix_suggestion": "Update comment to indicate json is default, and show explicit --format terminal for terminal output",
      "source_reference": "src/cli.rs:304 - format: OutputFormat with default_value = \"json\""
    },
    {
      "type": "unclear_content",
      "severity": "medium",
      "section": "Filtering and Focusing",
      "description": "Examples show filtering by category names (Architecture, Testing) but don't document what valid category names are",
      "current_content": "# Focus on architecture issues (god objects, complexity)\ndebtmap analyze . --filter Architecture\n\n# Focus on testing gaps\ndebtmap analyze . --filter Testing\n\n# Show only top 10 issues\ndebtmap analyze . --top 10",
      "should_be": "Should verify category names are correct and document the complete list of valid categories",
      "fix_suggestion": "Add a note or list documenting valid category names that can be passed to --filter. Cross-reference with debt detection types in the codebase.",
      "source_reference": "src/cli.rs:118-119 - filter_categories accepts Vec<String>, need to verify against debt::DebtType or similar"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Advanced Usage - Verbosity Levels",
      "description": "Chapter shows -v/-vv/-vvv but doesn't mention --verbose long form is also available",
      "current_content": "# Level 1: Show main score factors\ndebtmap analyze . -v\n\n# Level 2: Show detailed calculations\ndebtmap analyze . -vv",
      "should_be": "Examples are correct. Optional: note that --verbose is the long form",
      "fix_suggestion": "Optional: Add note that -v is short for --verbose",
      "source_reference": "src/cli.rs:94-99 - #[arg(short = 'v', long = \"verbose\")]"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Custom Thresholds",
      "description": "Chapter doesn't mention --threshold-preset option for quick configuration",
      "current_content": "# Set both complexity and duplication thresholds\ndebtmap analyze . \\\n  --threshold-complexity 15 \\\n  --threshold-duplication 50",
      "should_be": "Could also show the preset option as an alternative",
      "fix_suggestion": "Add example: debtmap analyze . --threshold-preset strict (options: strict, balanced, lenient)",
      "source_reference": "src/cli.rs:125-127 - threshold_preset option with ThresholdPreset enum"
    }
  ],
  "positive_aspects": [
    "Comprehensive coverage of all major use cases (Rust, Python, JS/TS analysis)",
    "Excellent real-world CI integration examples for GitHub Actions, GitLab CI, and CircleCI",
    "Very well-structured progression from basic to advanced usage",
    "Good use of actual examples from Debtmap's own workflows (.github/workflows/debtmap.yml)",
    "Clear explanations of what each option does and expected results",
    "Helpful interpretation guidance for output formats with example JSON structure",
    "Practical configuration examples (.debtmap.toml) for different project types",
    "Comprehensive compare command section with workflow and interpretation",
    "Examples are mostly syntactically valid (except for the flag name issues)",
    "Excellent 'Tips and Best Practices' section",
    "Good cross-references to other chapters",
    "Coverage integration examples for all supported languages (tarpaulin, pytest, jest)",
    "Monorepo analysis example",
    "Cache management examples",
    "Practical CI validation gates and regression detection examples"
  ],
  "improvement_suggestions": [
    "Add a quick reference table of valid category names for --filter option",
    "Include more examples of combining multiple advanced options together",
    "Add example showing how to read and use JSON output programmatically (jq examples)",
    "Show examples of setting environment variables mentioned in cache section",
    "Add section on interpreting exit codes in CI scripts",
    "Include performance benchmarks or tips for very large codebases",
    "Add example of using --max-files for limiting analysis scope",
    "Consider adding animated terminal recordings or screenshots of actual output"
  ],
  "metadata": {
    "analyzed_at": "2025-10-14",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [
      "Analyzing Rust projects",
      "Python analysis",
      "JavaScript/TypeScript",
      "CI integration (GitHub Actions, GitLab CI, CircleCI)",
      "Output formats (terminal, JSON, markdown)",
      "Advanced usage (context providers, multi-pass, cache, filtering)",
      "Configuration examples (.debtmap.toml)",
      "Compare command workflow"
    ],
    "validation_focus": "Ensure examples use current CLI syntax and options"
  }
}
