{
  "chapter_id": "multi-pass-analysis",
  "chapter_title": "Multi-Pass Analysis",
  "chapter_file": "book/src/multi-pass-analysis.md",
  "drift_detected": true,
  "severity": "critical",
  "quality_assessment": "Chapter is completely missing. The feature is fully implemented in the codebase with CLI flags and comprehensive functionality, but there is no user-facing documentation.",
  "issues": [
    {
      "type": "missing_content",
      "severity": "critical",
      "section": "Entire Chapter",
      "description": "The chapter file does not exist, but the multi-pass analysis feature is fully implemented in the codebase",
      "current_content": "File does not exist: book/src/multi-pass-analysis.md",
      "should_be": "Complete chapter explaining multi-pass analysis with attribution, including:\n1. Overview of multi-pass analysis concept\n2. How it works (raw vs normalized complexity)\n3. Attribution engine capabilities\n4. CLI usage (--multi-pass and --show-attribution flags)\n5. Understanding attribution output\n6. Performance considerations\n7. Use cases and examples",
      "fix_suggestion": "Create comprehensive chapter documenting the multi-pass analysis feature that analyzes code twice (raw and normalized) to attribute complexity to logical structure vs formatting artifacts",
      "source_reference": "src/analysis/multi_pass.rs:MultiPassAnalyzer, src/cli.rs:189,194"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Multi-Pass Analysis Overview",
      "description": "No explanation of what multi-pass analysis is and why it's useful",
      "should_add": "Multi-pass analysis performs two complexity analyses on the same code:\n1. Raw analysis - measures complexity of code as written\n2. Normalized analysis - measures complexity after removing formatting artifacts\n\nThe difference between these reveals how much 'complexity' is due to formatting vs genuine logical complexity.",
      "fix_suggestion": "Add section explaining the multi-pass concept and its benefits for distinguishing true complexity from formatting artifacts",
      "source_reference": "src/analysis/multi_pass.rs:49-57"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Attribution Engine",
      "description": "No documentation of the attribution engine that breaks down complexity sources",
      "should_add": "The attribution engine categorizes complexity into three types:\n1. Logical complexity - inherent complexity from control flow (if, loops, match, etc.)\n2. Formatting artifacts - complexity introduced by code formatting (multiline expressions, whitespace)\n3. Pattern complexity - complexity from recognized code patterns\n\nEach category includes:\n- Total contribution to overall complexity\n- Detailed breakdown with specific locations\n- Confidence score (0.0-1.0)\n- Actionable suggestions for improvement",
      "fix_suggestion": "Add section explaining the attribution engine's analysis breakdown and how to interpret the results",
      "source_reference": "src/analysis/attribution/mod.rs:39-65, ComplexityAttribution struct"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "CLI Usage",
      "description": "No documentation of --multi-pass and --show-attribution flags",
      "should_add": "Enable multi-pass analysis with attribution:\n```bash\ndebtmap analyze . --multi-pass --show-attribution\n```\n\nFlags:\n- `--multi-pass`: Enable multi-pass analysis (raw + normalized)\n- `--show-attribution`: Display detailed attribution breakdown showing which code constructs contribute to complexity",
      "fix_suggestion": "Add section showing how to use the multi-pass analysis flags with examples",
      "source_reference": "src/cli.rs:188-194"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Attribution Display Options",
      "description": "No explanation of different detail levels and output formats for attribution",
      "should_add": "Attribution output can be customized with:\n- Detail levels: summary, standard, comprehensive, debug\n- Output formats: json, markdown, terminal\n- Performance tracking: optional performance metrics\n\nConfigure via MultiPassOptions:\n```rust\nMultiPassOptions {\n    detail_level: DetailLevel::Comprehensive,\n    output_format: OutputFormat::Json,\n    enable_recommendations: true,\n    track_source_locations: true,\n    generate_insights: true,\n    performance_tracking: true,\n}\n```",
      "fix_suggestion": "Add section explaining configuration options for attribution output",
      "source_reference": "src/analysis/multi_pass.rs:300-324, MultiPassOptions"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Understanding Attribution Output",
      "description": "No guide for interpreting attribution results",
      "should_add": "Attribution output includes:\n\n1. **Logical Complexity Breakdown**\n   - Source type: LogicalStructure (Function, If, Loop, Match, Try, Closure)\n   - Contribution: complexity points from this construct\n   - Location: file, line, column, span\n   - Suggestions: actionable refactoring recommendations\n\n2. **Formatting Artifacts**\n   - Artifact types: MultilineExpression, ExcessiveWhitespace, InconsistentIndentation, etc.\n   - Severity: Low, Medium, High\n   - Impact on measured complexity\n\n3. **Pattern Analysis**\n   - Recognized patterns: ErrorHandling, Validation, DataTransformation, etc.\n   - Pattern confidence score\n   - Opportunities for pattern extraction\n\n4. **Source Mappings**\n   - Maps each complexity point to exact AST location\n   - AST path showing construct hierarchy\n   - Context information for navigation",
      "fix_suggestion": "Add comprehensive section with examples showing how to interpret attribution output",
      "source_reference": "src/analysis/attribution/mod.rs:259-356, ComplexityAttribution, AttributedComplexity, ComplexityComponent"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Insights and Recommendations",
      "description": "No documentation of automatically generated insights and recommendations",
      "should_add": "Multi-pass analysis generates actionable insights:\n\n**Insight Types:**\n- FormattingImpact: when formatting contributes >20% of complexity\n- PatternOpportunity: when pattern recognition is low (<0.5 confidence)\n- RefactoringCandidate: when logical complexity exceeds threshold (>20)\n- ComplexityHotspot: areas of concentrated complexity\n\n**Recommendations:**\n- Priority levels: Low, Medium, High\n- Categories: Refactoring, Pattern, Formatting, General\n- Estimated impact: reduction in complexity points\n- Suggested actions: specific steps to reduce complexity\n\nExample:\n```json\n{\n  \"insight_type\": \"RefactoringCandidate\",\n  \"impact_level\": \"High\",\n  \"actionable_steps\": [\n    \"Break down into smaller functions\",\n    \"Extract complex conditions into named variables\",\n    \"Consider using early returns to reduce nesting\"\n  ]\n}\n```",
      "fix_suggestion": "Add section explaining insights and recommendations with real examples",
      "source_reference": "src/analysis/multi_pass.rs:147-246, ComplexityInsight, ComplexityRecommendation"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Performance Considerations",
      "description": "No documentation of performance overhead and tracking",
      "should_add": "Multi-pass analysis overhead is monitored and limited:\n\n**Performance Metrics:**\n- Raw analysis time (ms)\n- Normalized analysis time (ms)\n- Attribution time (ms)\n- Total analysis time (ms)\n- Memory used (MB)\n\n**Overhead Limits:**\n- Target: â‰¤25% overhead compared to single-pass analysis\n- Warning issued if overhead exceeds limit\n- Performance tracking optional (disabled by default)\n\n**Optimization Tips:**\n- Use caching to reduce repeated analysis\n- Disable performance_tracking in production\n- Consider using --no-parallel for smaller codebases to reduce overhead\n- Attribution adds ~10-15% overhead on average",
      "fix_suggestion": "Add section explaining performance characteristics and how to monitor/optimize",
      "source_reference": "src/analysis/multi_pass.rs:76-99, AnalysisPerformanceMetrics"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Comparative Analysis",
      "description": "No documentation of compare_complexity function for before/after comparison",
      "should_add": "Multi-pass analysis supports comparing code changes:\n\n```rust\nuse debtmap::analysis::multi_pass::compare_complexity;\n\nlet before_code = \"...\"; // Original code\nlet after_code = \"...\";  // Refactored code\n\nlet comparison = compare_complexity(before_code, after_code, Language::Rust)?;\n\nprintln!(\"Complexity change: {}\", comparison.complexity_change);\nprintln!(\"Improvements: {:?}\", comparison.improvements);\nprintln!(\"Regressions: {:?}\", comparison.regressions);\n```\n\nComparison results include:\n- Complexity change (positive = increase, negative = decrease)\n- Cognitive complexity change\n- Formatting impact change\n- List of improvements detected\n- List of regressions detected",
      "fix_suggestion": "Add section on using multi-pass for refactoring validation",
      "source_reference": "src/analysis/multi_pass.rs:531-591, compare_complexity, ComparativeAnalysis"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Integration with Spec 84",
      "description": "No mention of future AST-based source mapping improvements",
      "should_add": "The current implementation uses estimated complexity locations. Spec 84 (Detailed AST-Based Source Mapping) will enhance attribution with:\n- Precise AST node locations (line, column, span)\n- 100% accurate mapping to source locations\n- Exact navigation from complexity reports to code\n- IDE integration for inline complexity visualization\n- Statement-level complexity heat maps\n\nThis will replace the current EstimatedComplexityLocation with precise SourceLocation tracking.",
      "fix_suggestion": "Add future enhancements section mentioning roadmap for precise AST mapping",
      "source_reference": "specs/84-detailed-ast-source-mapping.md"
    }
  ],
  "positive_aspects": [
    "Feature is well-implemented with comprehensive functionality",
    "Solid architecture with separation of concerns (multi_pass.rs, attribution/mod.rs)",
    "Good test coverage in implementation files",
    "Performance monitoring built-in with overhead warnings",
    "Extensible design supports multiple languages"
  ],
  "improvement_suggestions": [
    "Create the missing chapter with comprehensive documentation",
    "Include real-world examples showing before/after attribution output",
    "Add diagrams explaining the two-pass analysis flow",
    "Provide use cases: when to use multi-pass vs standard analysis",
    "Include troubleshooting section for common issues",
    "Add comparison with other complexity analysis approaches",
    "Document integration with other debtmap features (coverage, scoring, etc.)",
    "Include examples of using attribution for targeted refactoring",
    "Add cookbook-style recipes for common scenarios"
  ],
  "metadata": {
    "analyzed_at": "2025-10-26",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [],
    "topics_missing": [
      "Multi-pass analysis overview",
      "Complexity attribution",
      "Attribution display options",
      "Configuration and usage",
      "Performance considerations",
      "Insights and recommendations",
      "Comparative analysis",
      "Use cases and examples"
    ],
    "validation_focus": "Check that multi-pass analysis and attribution features are documented",
    "implementation_files": [
      "src/analysis/multi_pass.rs",
      "src/analysis/attribution/mod.rs",
      "src/analysis/attribution/change_tracker.rs",
      "src/analysis/attribution/pattern_tracker.rs",
      "src/analysis/attribution/source_tracker.rs",
      "src/cli.rs (lines 188-194)"
    ],
    "related_specs": [
      "specs/84-detailed-ast-source-mapping.md"
    ]
  }
}
